<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo + GitHub实现零成本Blog</title>
    <url>/2021/05/06/Hexo%20+%20GitHub%E5%AE%9E%E7%8E%B0%E9%9B%B6%E6%88%90%E6%9C%ACBlog/</url>
    <content><![CDATA[<p>　　对于自己创造内容并不稳定的情况，花费金钱和精力去维护一个服务器（VPS/ECS）是不明智的。但是实际上难免会遇到记录和创作分享的需要，作为技术控，当然不想选用现成的商业化产品。那么，能够有个方式“白嫖”到资源存放静态博客/笔记站点内容的同时，再实现站点的部署更新都自动化完成（CI/CD概念），就很完美了。<br>　　恰巧，GitHub当前可以完成这种需求。这里记录一下完全利用GitHub （Repo + Pages + Action）建设Hexo站点的“最佳实践”。    </p>
<span id="more"></span>   
<p>　　首先，该方案的整体设计架构如下：<br>　　<img data-src="/images/github_blog/arch.jpg"><br>　　如图上的展示，整体思路是：   </p>
<ul>
<li>使用Hexo作为静态博客站点的框架，实现MarkDown编写日志文章内容；    </li>
<li>使用GitHub的Private（私有）Repo作为Hexo源码（包括日志源码、Hexo配置及站点主题配置文件、其他一些数据等）；   </li>
<li>使用GitHub Pages（网页代管服务）作为静态站点的承载展示；   </li>
<li>使用GitHub Action（CI/CD）作为持续部署方案，将源码Repo生成部署到Pages；   </li>
<li>为GitHub Pages配置个人域名；<br>　　后续即按照上面各点逐一介绍实现步骤，根据关键性不同，详细程度会有所不同。  <h3 id="构建Hexo源码Repo"><a href="#构建Hexo源码Repo" class="headerlink" title="构建Hexo源码Repo"></a>构建Hexo源码Repo</h3>　　在Github中创建新Repo（默认已注册GitHub账号）： 点击右上角+号，选择<code>New repository</code>，设置<code>Repository name</code>(如<strong>myblog</strong>)，类型选择<code>Private</code>。点击<code>Create repository</code>完成创建。<br>　　在本机进行Hexo的安装（由于网上有不少教程此处从简介绍）以及将其添加到GitHub的源码Repo中。确保机器已安装Node.js和Git的前提下执行下面命令（链接中<strong>username</strong>和<strong>myblog</strong>换成自己的GitHub用户名和刚创建时设置的源码Repo名称）：<pre><code class="bash">npm install -g hexo-cli
hexo init myblog
cd myblog
npm install
git init
git add .* *
git commit -m &quot;myblog init&quot;
git branch -M main
git remote add origin https://github.com/username/myblog.git
git push -u origin main
</code></pre>
　　至此，已将站点的Hexo源码初始化并提交到GitHub的源码Repo中。<br>　　接下来可以进行一系列的诸如Hexo配置及美化工作，这部分就先略掉，可参见网上的一些教程。   <h3 id="构建站点发布GitHub-Pages"><a href="#构建站点发布GitHub-Pages" class="headerlink" title="构建站点发布GitHub Pages"></a>构建站点发布GitHub Pages</h3>　　与上面类似，在Github中创建新Repo： 点击右上角+号，选择<code>New repository</code>，设置<code>Repository name</code>(必须为<strong>username.github.io</strong>格式，其中username为你的GitHub用户名)，类型选择<code>Public</code>。点击<code>Create repository</code>完成创建。<br>　　为了实现在源码Repo更新文章（或站点配置）后自动生成并同步部署到GitHub Pages，需要设置GitHub Pages的Repo的<code>deploy key</code>。<br>　　输入以下命令(其中<strong><a href="mailto:&#x75;&#115;&#x65;&#x72;&#x6e;&#97;&#x6d;&#x65;&#x40;&#101;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;">&#x75;&#115;&#x65;&#x72;&#x6e;&#97;&#x6d;&#x65;&#x40;&#101;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;</a></strong>为GitHub用户邮箱)：<pre><code class="bash">ssh-keygen -t rsa -C &quot;username@email.com&quot; 
</code></pre>
　　根据之后提示选择密钥文件存储位置和密码（直接回车设置为空）。<br>　　在刚刚创建的<strong>username.github.io</strong> Repo的<code>Settings</code>中点击<code>Deploy keys</code>，选择<code>Add deploy key</code>。Title可以根据喜好设置（如myblog_deploy_pubkey），Key的内容复制进刚才使用命令生成的<code>.pub</code>扩展名的公钥文件内容。下面的<code>Allow write access</code>的复选框要勾选。   <h3 id="配置站点的自动化更新部署"><a href="#配置站点的自动化更新部署" class="headerlink" title="配置站点的自动化更新部署"></a>配置站点的自动化更新部署</h3>　　站点的自动化更新部署通过在源码Repo中配置GitHub Action来实现。关于GitHub Action的原理和更多技巧可参见网上资料。<br>　　先准备部署时使用的部署私钥（Deploy key），在<strong>myblog</strong>的<code>Settings</code>的<code>Secrets</code>中点击<code>New repository secret</code>，名称可以设置为如<strong>HEXO_DEPLOY_PRI</strong>，内容复制入上一节中除<code>.pub</code>文件之外的另一个私钥文件内容，再点击<code>Add secret</code>。<br>　　然后，在本机命令行下进入第一步中创建的<code>myblog</code>目录下执行：   <pre><code class="bash">mkdir .github/workflows
touch .github/workflows/deploy.yml
</code></pre>
　　随后编辑<code>deploy.yml</code>文件内容如下(注意修改其中username为你的GitHub用户名，<a href="mailto:&#117;&#x73;&#x65;&#x72;&#x6e;&#x61;&#109;&#101;&#x40;&#x65;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#117;&#x73;&#x65;&#x72;&#x6e;&#x61;&#109;&#101;&#x40;&#x65;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a>为你的GitHub注册邮箱）：   </li>
</ul>
<pre><code class="yaml">name: CI

on:
  push:
    branches:
      - main

env:
  GIT_USER: username
  GIT_EMAIL: username@email.com

jobs:
  build:
    name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125;
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        node_version: [15.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125;
        uses: actions/setup-node@v1
        with:
          node-version: $&#123;&#123; matrix.node_version &#125;&#125;

      - name: Configuration environment
        env:
          HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;
        run: |
          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;
          mkdir -p ~/.ssh/
          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts
          git config --global user.name $GIT_USER
          git config --global user.email $GIT_EMAIL
          npm install -g hexo-cli
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-$&#123;&#123; hashFiles('**/package-lock.json') &#125;&#125;
          restore-keys: |
            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-
            $&#123;&#123; runner.os &#125;&#125;-build-
            $&#123;&#123; runner.os &#125;&#125;-
      - name: Install dependencies
        run: |
          npm install
      - name: Deploy hexo
        run: |
          hexo clean &amp;&amp; hexo deploy
</code></pre>
<p>　　另外，修改Hexo的配置文件（即myblog目录下的<code>_config.yml</code>)中的<code>deploy</code>片段如下(同样注意修改其中的用户名和repo名称)：  </p>
<pre><code class="yaml">deploy:
  type: git
  repo: git@github.com:username/username.github.io.git
  branch: main
</code></pre>
<p>　　修改完成后使用git add、git commit、git push等命令完成提交到GitHub。   </p>
<p>　　以上即基本完成了源码Repo、发布Repo（Pages）和自动化部署的配置，在之后只需要在源码Repo中按照Hexo的使用方法用Markdown编写文章，再将更改提交到源码Repo，就会自动化更新到GitHub Pages的站点。而GitHub Pages站点的访问使用<a href="https://username.github.io/">https://username.github.io</a> 即可。   </p>
<h3 id="配置站点个人域名"><a href="#配置站点个人域名" class="headerlink" title="配置站点个人域名"></a>配置站点个人域名</h3><p>　　通过前面步骤完成的个人网站的部署，访问网址是<code>username.github.io</code>这样的形式，对于想使用个人域名访问该站点的，也很容易实现。<br>　　先在个人域名的DNS设置解析，新增一条个人域名到<code>username.github.io</code>的CNAME解析。<br>　　然后在GitHub Pages Repo（<code>username/username.github.io</code>）的Settings的Pages下的<code>Custom domain</code>填写个人域名，建议勾选<code>Enforce HTTPS</code>。<br>　　最后，在<code>myblog</code>源码Repo中的<code>source</code>目录下添加一个名为<code>CNAME</code>的文件，其内容填写入个人域名（如<code>www.username.com</code>），并完成提交推送（commit &amp; push）。<br>　　这样，就实现了个人域名到GitHub Pages的映射，可以通过个人域名访问前面建立的个人站点了。   </p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>建站</tag>
        <tag>GitHub</tag>
        <tag>自动化</tag>
        <tag>CI/CD</tag>
        <tag>GitHub Action</tag>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux上DNS客户端配置的西西弗斯式任务</title>
    <url>/2021/04/21/Linux%E4%B8%8ADNS%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE%E7%9A%84%E8%A5%BF%E8%A5%BF%E5%BC%97%E6%96%AF%E5%BC%8F%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>　　域名服务(Domain Name Service)发明于1983年。DNS是一个可以让你把名字转换成IP地址的系统，这样你的电脑就可以知道如何连接像google.com这样的网站。这是一个简单的服务，因此4.3 BSD的作者指定了一个名为<code>/etc/resolv.conf</code>的简单配置文件:   </p>
<pre><code class="shell">$ cat /etc/resolv.conf   
nameserver 100.100.2.136   
nameserver 100.100.2.138   
</code></pre>
<span id="more"></span>
<p>　　在这种情况下，它告诉DNS解析函数使用192.168.122.1作为DNS服务器。这意味着当你查找像google.com这样的网站时，它会要求192.168.122.1为你查找:   </p>
<pre><code class="shell">$ nslookup google.com
Server:         100.100.2.136
Address:        100.100.2.136#53

Non-authoritative answer:
Name:   google.com
Address: 172.217.174.206
Name:   google.com
Address: 2404:6800:4005:809::200e 
</code></pre>
<p>　　如果是在以前，我们可能只需要安全地修改/etc/resolv.conf，这样就结束了。<br>　　然而，像DHCP这样的东西出现了，并且给这种对应增加了一些必要的复杂性。DHCP是一个协议，它让网络上的机器通过漫无目的地对网络上的每个设备大喊大叫，直到有人告诉他们应该使用什么配置。DHCP提供的东西之一是网络首选DNS服务器的IP地址。<code>/etc/resolv.conf</code>的内容需要由某个程序来管理，如果有分歧，不同意见的程序(如DHCP客户端和其他程序)需要竞争DNS控制权。大多数发行版和定制设置开始使用一个搜索不到的叫做<code>resolvconf</code>的程序来帮助实现这一点。<br>　　<code>resolvconf</code>会在<code>/etc/resolv.conf</code>的开头添加一条注释，让你知道<code>resolvconf</code>正在管理它:   </p>
<pre><code class="shell"># Generated by resolvconf   
</code></pre>
<p>　　<code>resolvconf</code>是一个松散的管理DNS公约，由多个程序以略微互不兼容的方式实现。最常见的两个是<a href="https://gitlab.com/jdthood/resolvconf">Debian的<code>resolvconf</code></a>和<a href="http://roy.marples.name/projects/openresolv">openresolv</a>。<br>　　当一些东西对DNS配置有意见时，需要某种方法在它们之间进行仲裁。Debian的<code>resolvconf</code>采用了让每个人都赢的策略，并安装了一个混合了所有输入的配置。这在除了你实际上希望能够完全覆盖DNS配置(例如，因为一个管理员通过某程序设置了一个强制DNS配置）之外的情况是很好的。在其中某程序认为自己比其他程序更正确，但其他程序对自己的看法也是一样的，Debian resolvconf拒绝选出一个赢家。<br>　　<code>openresolv</code>则允许指定DNS服务器的优先级顺序。此外，它允许程序指定一个“独占”模式，在这种模式下，总是倾向于选择一种选项，而其他选项将被丢弃。如果两个程序想要处于“独占”模式，最后一个提供配置的程序获胜，我们将回到DNS控制权的竞争中。<br>　　之后FreeDesktop的人注意到这种持续不断的DNS控制权之争非常恼人(更不用说配置wifi连接更加恼人) ，他们一起创造了更好的路径并将之称为<a href="https://en.wikipedia.org/wiki/NetworkManager">NetworkManager</a>。它使用称之为<a href="https://www.freedesktop.org/wiki/Software/dbus/">D-Bus</a>的协议允许其他程序告诉他该做什么。这是在<code>resolvconf</code>上的显著改进。要使用<code>resolvconf</code>更新<code>/etc/resolv.conf</code>，您需要将所需的配置通过管道传送到<code>resolvconf</code>，并希望您所希望的事情真正发生。NetworkManager的API有个模式且允许内省（自检？），从而使得程序一端更加容易。<br>　　NetworkManager的目标是成为一个守护进程来制定Linux上所有的网络管理的规则。尽管它有自己的方式来管理<code>/etc/resolv.conf</code>，但有时可以将NetworkManager配置为使用<code>resolvconf</code>来管理<code>/etc/resolv.conf</code>。这发生在比想象更多的发行版上。网络管理器很好地隐藏了大量困难的部分，并允许用户使用GUI工具配置网络。<br>　　NetworkManager在很长一段时间内都是DNS配置的标准和最好的选择(到今天仍有些发行版更喜欢它) ，但是随着事情变得越来越复杂而需要一些功能更强大的东西。<a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a>项目创建了一个名为<a href="https://wiki.archlinux.org/index.php/Systemd-resolved">systemd-resolved</a>的解决方案，允许管理员对每个网络接口上如何解析DNS进行更多的控制。以下是一台Linux机器的解析状态:   </p>
<pre><code class="shell">$ resolvectl status
Global
           Protocols: +LLMNR +mDNS -DNSOverTLS DNSSEC=no/unsupported
    resolv.conf mode: stub
  Current DNS Server: 100.100.100.100
         DNS Servers: 100.100.100.100 8.8.8.8 1.1.1.1
Fallback DNS Servers: 100.100.100.100 8.8.8.8 1.1.1.1
          DNS Domain: akua.xeserv.us christine.website.beta.tailscale.net

Link 2 (enp5s0)
Current Scopes: LLMNR/IPv4 LLMNR/IPv6
     Protocols: -DefaultRoute +LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported

Link 9 (tailscale0)
Current Scopes: LLMNR/IPv4 LLMNR/IPv6
     Protocols: -DefaultRoute +LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported
</code></pre>
<p>　　systemd-resolved允许使用<a href="https://en.wikipedia.org/wiki/DNS_over_TLS">DNS over TLS</a>，这是超出本文讨论中心的内容。不过systemd-resolved也允许第三方程序通过其D-Bus API(并非和 NetworkManager同样的API)可靠地配置它。<br>　　当然，这里假设我们将DNS视为一个全球一致的名称空间，就像DNS最初被发明时的设想一样，但事实并非总是如此。<br>　　一些网络或组织拥有处理无法通过互联网解析名称的自己的私有DNS服务器。这让事情变得更加复杂，由于缺乏更好的术语，可将这种设置称为“分裂DNS”。<br>　　IP流量使用路由表在其他机器之间进行路由。这个路由表有一个网络和如何使用它们的说明列表。要正确处理“分裂DNS”设置，您需要一个DNS的路由表，按子域而非IP地址拆分。这就是Windows、macOS和Linux（使用systemd-resolved）处理这类配置的方式。例如，您可以有一个DNS路由表看起来像下面这样:   </p>
<ul>
<li>　　如果域名以<code>.akua</code>结尾，查询<code>10.77.2.2</code>   </li>
<li>　　如果域名以<code>.local</code>结尾，查询Bonjour   </li>
<li>　　其他情况查询<code>1.1.1.1</code>或<code>8.8.8.8</code>   　　这些设置比想象的更加普遍，几乎每个有Mac的家庭都在使用。这可以让你通过<code>computername.local</code>自动发现域计算机名的IP地址。大多数企业VPN也希望通过此将其内部服务(如git、数据库或IRC服务器)解析到VPN之后的IP地址。这可以防止将请求泄漏给公共DNS服务，而Linux(即在没有运行systemd-resolved时)缺乏这种开箱即用的支持一直是一个重大限制。<br>　　<code>/etc/resolv.conf</code>不支持基于域名的DNS路由，因此第三方应用在最基本的配置中，可能需要守护进程中的过程中解析器内实现路由，并告诉操作系统将其所有DNS流量发送到其指定的DNS（如100.100.100.100）。这些流量通过机器上程序的进程在本地处理，并让基于resolv.conf的系统拥有“分裂DNS”。这仍然不得不偶尔竞争DNS控制权，这取决于试图编辑<code>/etc/resolv.conf</code>的其他程序。<code>resolvconf</code>是类似，可能在配置竞争上要少一些。<br>　　然后，NetworkManager能够控制<code>/etc/resolv.conf</code>、 <code>resolvconf</code>，可能还有一个名为<a href="https://thekelleys.org.uk/dnsmasq/doc.html"><code>dnsmasq</code></a>的DNS服务器。唯一允许“分裂DNS”的是<code>dnsmasq</code>模式。这意味着第三方程序需要关心NetworkManager处于哪种模式，可能使用这段<a href="https://github.com/tailscale/tailscale/blob/main/net/dns/manager_linux.go#L22-L58">代码</a>来实现这一点。这有一些额外的代码来处理应该使用NetworkManager的情况，但是它不能响应Ping(感谢$DEITY，标准的D-Bus方式是让每个对象实现一个“Ping”方法) ，这种情况下再次陷入困境。<br>　　这一切的一个主要困难是Linux系统上的名称解析非常糟糕，这些方法中的每一个都会导致略微不同的行为。如果我们为<code>go.akua</code>做一个解析会发生什么？它会进入公共互联网的解析器吗？它会转到正确的“分裂DNS”吗？它会因为某种原因被送到Tor吗？它会被发送到你当地咖啡店的公共wifi热点上潜在的危险DNS服务器上吗？它会通过UDP，TCP或者DNS over HTTPS发送吗？我们不知道。这些东西没有被记录下来，因此你需要想尽办法来了解它做了什么。另外，glibc和musl的行为也有不同。<br>　　该如何正确做的一个例子是systemd-resolved，它可以原生地做到现代“分裂DNS”VPN的一切，因此理论上不需要额外的工作。systemd团队<a href="https://man7.org/linux/man-pages/man8/systemd-resolved.service.8.html">细心地写下了他们所做的事情</a>，并且明确地表明了你应该如何摆弄来得到你想要的东西，这是基础设施项目应该努力拥有的那类文档。<br>　　现在，如果需要在Linux上提供一个DNS服务器，并且必须弄清楚应该如何配置系统的解析器，按照下面这样做：   　　首先，检查<code>/etc/resolv.conf</code>是否存在，如果没有则可以覆盖。<br><img data-src="/images/dns_on_linux/image1.png"><br>　　如果存在，那么需要检查文件的所有者（通过检查文件顶部的magic字段）例如：   <pre><code class="shell"># Generated by resolvconf
</code></pre>
<pre><code class="shell"># This is /run/systemd/resolve/stub-resolv.conf managed by man:systemd-resolved(8).
# Do not edit.
</code></pre>
<pre><code class="shell"># Generated by NetworkManager
</code></pre>
　　这将告诉我们哪个服务在管理<code>/etc/resolv.conf</code>文件，如果找不到任何所有者则需要替换掉<code>/etc/resolv.conf</code>并祈祷。<br>　　如果<code>resolvconf</code>正在使用，那么你也应该使用，前提是<code>resolvconf</code>二进制文件在$PATH中:<br><img data-src="/images/dns_on_linux/image2.png"><br>　　如果这个配置看起来属于NetworkManager，那么需要检查NetworkManager是否可以通过D-Bus访问，如果可以那么使用它，否则，需要重新覆盖resolv.conf。<br>　　NetworkManager还给resolvconf的路径添加了一个问题: 如果resolvconf生成的配置来自NetworkManager，应当尝试使用NetworkManager而不是resolvconf。因此，需做一个额外的检测，看看是否resolvconf是由NetworkManager提供的，如果是则切换到NetworkManager。<br>　　如果resolvconf似乎是由NetworkManager提供的，但是无法与NetworkManager通信，就应该退回到使用resolvconf。<br><img data-src="/images/dns_on_linux/image3.png"><br>　　如果使用systemd-resolved，事情应该进行顺利… 但有一个问题，直到最近为止NetworkManager对systemd-resolved的配置有点不正确，从而使得如果自行与systemd-resolved进行对话不可能覆盖默认的解析程序。这点是在2020年12月通过NetworkManager 1.26.6修复的(<a href="https://gitlab.freedesktop.org/NetworkManager/NetworkManager/-/issues/688">相关的错误报告</a>)。<br>　　因此，如果正在使用systemd-resolved，需要检查NetworkManager是否也存在以及它是否将其配置推送到systemd-resolved中。如果是则必须使用NetworkManager来配置DNS，即使它的功能比systemd-resolved稍少一些。<br><img data-src="/images/dns_on_linux/image4.png"><br>　　上面这样设置将允许以一致的方式在Linux系统上配置DNS。此外还需要为服务所需的DNS路由位实现一个“polyfill”，以应对每种没有路由感知DNS配置的情况(上图中的大多数情况)。<br>　　如果你决定将来要提供一些新的DNS配置管理服务，请确保它有文档记录包含它与图中其余部分的相互作用。<br>　　对于Linux发行版的维护者而言，可能会想知道应该给用户带来这些纷乱中的哪一部分。建议使用systemd-resolved，而如果需要用户友好的网络配置，则使用最新版本的NetworkManager(1.26.6或更好)。这将提供发行版最先进的DNS能力，并使网络软件的实现者更高兴。使用这种设置的DNS配置图像如下:<br><img data-src="/images/dns_on_linux/image5.png">   </li>
</ul>
<p><sup>*</sup> <small>注：本文译自Tailscale的<a href="https://tailscale.com/blog/sisyphean-dns-client-linux/">Blog</a>,并在其基础上有所删改。文本的全部最终权利归原作者所有。</small></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>网络</tag>
        <tag>Linux</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>格密码学笔记</title>
    <url>/2020/09/07/%E6%A0%BC%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>随着量子计算的迫近，现在普遍在用的一些密码算法（尤其是非对称密码算法）面临着被高效算力攻破的风险。**<code>后量子密码</code>**（Post-QuantumCryptography，或者称之为抗量子密码）成为当前密码学界的一个重要课题。这其中，基于格的密码学（本文简称格密码）是一个目前看来很有优势的应对方案，故有必要对其加以了解涉足。   </p>
<span id="more"></span>
<h1 id="讨论背景"><a href="#讨论背景" class="headerlink" title="讨论背景"></a>讨论背景</h1><h2 id="量子基础概念"><a href="#量子基础概念" class="headerlink" title="量子基础概念"></a>量子基础概念</h2><ul>
<li>量子是对符合量子力学特性的事物的统称。<code>一个</code><mark><code>物理量</code></mark><code>所在的最小的不可分割的基本单位</code>   <table>
<thead>
<tr>
<th>量子态叠加</th>
<th>测不准</th>
<th>量子纠缠</th>
</tr>
</thead>
<tbody><tr>
<td>&#124;ψ&gt;=&#124;0&gt;+&#124;1&gt;</td>
<td>测量影响系统，系统中的两个不同物理量不可同时准确测量</td>
<td>多粒子组成的系统，每个粒子状态无法被分离出。但容易量子退相干</td>
</tr>
</tbody></table>
</li>
</ul>
<p>利用量子的特性，量子计算可以实现一个量子比特同时具备两种状态且可通过纠缠与其他量子比特共享自身状态，从而实现并行计算，计算能力将随量子比特数增加呈指数增长。<br>目前可用于密码破译的量子计算算法主要有<strong>Grover算法</strong>和<strong>Shor算法</strong>。前者可相当于<code>将密码密钥长度减少一半</code>，后者适用于<code>解决大整数分解、离散对数求逆</code>等困难数学问题。   </p>
<h2 id="量子密码（量子密钥分发、量子安全通信）"><a href="#量子密码（量子密钥分发、量子安全通信）" class="headerlink" title="量子密码（量子密钥分发、量子安全通信）"></a>量子密码（量子密钥分发、量子安全通信）</h2><div class="note info"><h4 id="无条件安全"><a href="#无条件安全" class="headerlink" title="无条件安全"></a>无条件安全</h4><p>香农证明，若密钥是长度不小于待加密明文长度的随机序列，且任何一密钥仅使用一次，则该加密体制（C=PK）是无条件安全的（Perfect Secrecy）</p>
</div>   
<p>无条件安全主要受限于庞大的密钥消耗量，一个是密钥长度，一个是要求“一次一密”。而“一次一密”对于密钥分发能力的要求是传统方式难以支持的。<br>量子密码本质是试图解决密钥分配问题。理想的量子密码（密钥分发）应该是可以保证密钥安全性的，但实际和理论是两码事，如单光子探测效率、传输损耗、器件不完善、要求可信中继、成码率限制等等都是制约问题。   </p>
<h2 id="后量子密码"><a href="#后量子密码" class="headerlink" title="后量子密码"></a>后量子密码</h2><p>前面提到量子计算因为量子特性而具备天然的并行性，计算能力可随量子比特位增加指数级增长，这一特性对于基于数学难题的传统公钥密码安全受到挑战。但是，量子计算机并不能解决电子计算机难于求解的所有数学问题，所以可以针对量子计算机不擅长计算的数学问题构造密码进行抵抗。   </p>
<ul>
<li>2015年，NSA宣布面临量子计算威胁，计划将联邦政府使用的RSA/ECC体系向后量子算法迁移   </li>
<li>2016年，NIST向全球公开后量子密码标准化路线图，并征集密码系统建议（约1年），包含公钥密码、数字签名及密钥交换算法；此后3-5年分析并公布分析报告，1-2年最终标准拟制   </li>
<li>2015年，欧洲量子密码学术和工业界研究者联合组织“后量子密码”项目（PQCrypto）发布初始报告在对称加密授权、公钥加密签名领域提出了标准化建议。</li>
<li>当前（2020年7月22日）开始，NIST的征集进入了<a href="https://csrc.nist.gov/projects/post-quantum-cryptography/round-3-submissions"><mark>第三轮</mark></a><br><code>下面是NIST的第二轮征集结束报告</code>   <div class="pdf-container" data-target="/pdf/NIST.IR.8309.pdf" data-height="500px"></div>   
<code>下面是NIST公布的量子计算对于密码算法的影响</code>   <table>
<thead>
<tr>
<th>密码算法</th>
<th>类型</th>
<th>用途</th>
<th>大规模量子计算影响</th>
</tr>
</thead>
<tbody><tr>
<td>AES</td>
<td>对称密钥</td>
<td>加密</td>
<td>需要增加密钥长度</td>
</tr>
<tr>
<td>SHA-2，SHA-3</td>
<td>N/A</td>
<td>哈希函数</td>
<td>需要更大输出量</td>
</tr>
<tr>
<td>RSA</td>
<td>公钥</td>
<td>签名，密钥生成</td>
<td>不再安全</td>
</tr>
<tr>
<td>ECDSA，ECDH （ECC密码）</td>
<td>公钥</td>
<td>签名，密钥生成</td>
<td>不再安全</td>
</tr>
<tr>
<td>DSA（有限域密码）</td>
<td>公钥</td>
<td>签名，密钥生成</td>
<td>不再安全</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="NIST提出的PQC"><a href="#NIST提出的PQC" class="headerlink" title="NIST提出的PQC"></a>NIST提出的PQC</h3><p>NIST在发布的PQC报告中，提供了PQC的四个密码算法类型：<br><strong>格密码</strong> 基于格问题的密码系统重新引起兴趣，新应用（如同态加密、代码混淆及属性加密）使用格密码而成为可能。大部分基于格的密钥生成时相对简单、高效、高并发的。同样，一些基于格系统相比平均情况在最坏情况假设下可证明安全。另外，已证明在已知密码分析技术下很难对格方案安全性做出精确估计。<br><strong>基于编码的密码</strong> 1978年McEliece密码体系被首次提出后尚未被攻破。如基于纠错码。密钥长度较大。<br><strong>多元多项式密码</strong> 这些方案基于有限域内多元多项式求解系统的困难，过去几十年提出的一些被攻破。似乎作为签名手段更成功些。<br><strong>基于哈希的签名</strong> 使用哈希函数构建数字签名，其安全在面对量子攻击时很好。但缺点一是需要记录之前签名过的消息数量，另一个缺点是只能生成有限数量的签名（因为签名大小会伴随上升）。   </p>
<h1 id="格密码基础"><a href="#格密码基础" class="headerlink" title="格密码基础"></a>格密码基础</h1><h2 id="一些数学"><a href="#一些数学" class="headerlink" title="一些数学"></a>一些数学</h2><p>现代密码学的基础都是近世代数，是基于数学难题，因此离不开对于数学知识的了解研究。    </p>
<blockquote>
<p><strong>格</strong>是n维线性空间中离散点的集合，格中每个元素都是一个向量，在n维线性空间R<sup>n</sup>中m（m≤n）个线性无关向量（b<sub>1</sub>,b<sub>2</sub>,…,b<sub>m</sub>)所生成的向量集合称为<strong>格</strong>。<br>这个向量组称为格的一组基，空间维数n为格的维，基向量个数m称为格的秩，同一个格可以有多组不同的基，但基的维数相同。当m=n时格是<strong>满秩</strong>的，一般只讨论满秩的格。<br>将格基表示成矩阵形式<strong>B</strong>，其每个列向量即为格的基<strong>b<sub>1</sub></strong>,…,**b<sub>n</sub>**，则格可定义为 $ \pmb L=\lbrace\pmb B\pmb z | \pmb z\in \mathbb{Z}^n \rbrace $    </p>
</blockquote>
<blockquote>
<p><strong>格的行列式</strong> det(<strong>L</strong>)的值定义为格基本体的体积，$ det(\pmb L)=\sqrt{\pmb B^T\pmb B} $</p>
</blockquote>
<blockquote>
<p><strong>对偶格</strong> 与原格在同一线性空间$R^n$中，$ \pmb L^*=\lbrace\pmb x \in\mathbb R^m , \forall\pmb v \in \pmb L ,\langle\pmb x , \pmb v \rangle\in\mathbb Z\rbrace $</p>
</blockquote>
<blockquote>
<p><strong>逐次最小长度</strong> 第i个逐次最小长度$ \lambda_i $，定义为以原点为球心，包含i个线性无关格向量的最小球半径，即$ \lambda_i(\pmb L)=inf\lbrace r|dim(span(\pmb L\bigcap\pmb B_n(r)))\geq i\rbrace,(i=1,…,n) $</p>
</blockquote>
<p>从上面可以看出格的定义和向量空间类似，但通过基生成向量时要求整数系数。这一点使得格在几何上由离散且呈周期性结构的点构成，这大概也是“格”这个名字的由来。具备直观感受的格的维度是2或者3，即可对应生活中可感知的几何空间，但在密码学中为了达到足够安全性，格的维度一般在1000左右。<br>格的一个基本困难问题——<code>最短向量问题</code>（SVP）：给定格的一个基，在格中找到一个非零向量，其长度在所有非零格向量上最短。   </p>
<blockquote>
<p><strong>最短向量问题（Shortest Vector Problem，SVP）</strong> 给定格$ \pmb L $，找一个非零向量$ \pmb v $，满足对任意非零向量$ \pmb u\in\pmb L, \parallel\pmb v\parallel\leq\parallel\pmb u\parallel$</p>
</blockquote>
<blockquote>
<p><strong>$ \gamma $-近似最短问题（SVP-$ \gamma $）</strong> 给定格$ \pmb L $，找一个非零向量$ \pmb v $，满足对任意非零向量$ \pmb u\in\pmb L, \parallel\pmb v\parallel\leq\gamma\parallel\pmb u\parallel$</p>
</blockquote>
<blockquote>
<p><strong>逐次最小长度问题（Successive Minima Problem，SMP）</strong> 给定秩为n的格$ \pmb L $，找n个线性无关的格向量$ \pmb s_i $，满足$ \lambda_i(\pmb L)= \parallel\pmb s_i\parallel,(i=1,…,n) $</p>
</blockquote>
<blockquote>
<p><strong>最短线性无关向量问题（Shortest Independent Vector Problem, SIVP)</strong> 给定一个秩为n的格$ \pmb L $，找到n个无关的格向量$ \pmb s_i $ 满足 $ \parallel\pmb s_i\parallel\leq\lambda_n(\pmb L),(i=1,…,n) $</p>
</blockquote>
<blockquote>
<p><strong>唯一最短向量问题（Unique Shortest Vector Problem, uSVP-$ \gamma $）</strong> 给定格$ \pmb L $，满足$ \lambda_2(\pmb L)\gt\gamma\lambda_1(\pmb L) $，找出该格的最短向量</p>
</blockquote>
<blockquote>
<p><strong>最近向量问题（Closest Vactor Problem, CVP）</strong> 给定格$ \pmb L $和目标向量$ \pmb t\in \mathbb R^m $，找到一个非零格向量$ \pmb v $，满足对任意非零向量$ \pmb u\in\pmb L,\parallel\pmb v-\pmb t\parallel\le\parallel\pmb u-\pmb t\parallel $</p>
</blockquote>
<blockquote>
<p><strong>有界距离解码问题（Bounded Distance Decoding， BDD-$ \gamma $）</strong> 给定一个格$ \pmb L $，目标向量$ \pmb t $满足$ dist(\pmb t,\pmb L)\lt\gamma\lambda_1(\pmb L) $，找一个非零格向量$ \pmb v $，满足对任意非零向量$ \pmb u\in\pmb L,\parallel\pmb v-\pmb t\parallel\le\parallel\pmb u-\pmb t\parallel $</p>
</blockquote>
<p>SVP是一个计算难题，放到密码学界则对与之相应的判断问题更感兴趣，即GapSVP问题：给定一个参数r和一个格的基，判断出格是否包含长度最大为1的非零向量，或者最短的非零向量的长度是否大于r。下面的是对这个问题近似化（相当于放宽条件）后的描述：</p>
<blockquote>
<p><strong>判定版本$ \gamma $-近似最短向量问题（GapSVP-$ \gamma $）</strong> 给定格$ \pmb L $和一个有理数$ r $，如果$ \lambda_i(\pmb L)\le r $，则返回“是”，如果$ \lambda_i(\pmb L)\gt \gamma r $，则返回“否”，其他情况随机返回</p>
</blockquote>
<p>实际上格理论的产生最初似乎是基于对空间内放置球体体积与空间容积比的讨论，所以从上面的“逐次最小长度”的定义也能看出与球有一定关系，那么下面再补充两个概念：</p>
<blockquote>
<p><strong>堆积半径</strong> 对$ n $维格，以格点为球心，$ r $为半径做$ n $维球，使得球两辆不想交，最大的$ r $称作堆积半径，事实上这里 $ r=\lambda_1(\pmb L)/2 $</p>
</blockquote>
<blockquote>
<p><strong>覆盖半径</strong> 对$ n $维格，以格点为球心，$ r $为半径做$ n $维球，能覆盖整个空间的最小半径$ r $称作覆盖半径</p>
</blockquote>
<p>以上这些概念，都源于刚说的空间内放置球体的问题。确定球的最大格堆积密度（堆积半径下体积/容积）等价于求格的最短向量（SVP）长度，确定球的最小格覆盖密度（覆盖密度下体积/容积）则等价于求到格点的最近距离（CVP）。<br>基于格的密码体制的安全性依赖于格中困难问题的难解程度 , 格中很多困难问题被证明是 NP 困难的 , 因此 这类体制被普遍认为具有抗量子攻击的特性</p>
<h1 id="To-Be-Continued"><a href="#To-Be-Continued" class="headerlink" title="To Be Continued..."></a><code>To Be Continued...</code></h1>]]></content>
      <categories>
        <category>学术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>密码学</tag>
        <tag>量子</tag>
      </tags>
  </entry>
  <entry>
    <title>一起看电影开发日志</title>
    <url>/2020/03/16/%E4%B8%80%E8%B5%B7%E7%9C%8B%E7%94%B5%E5%BD%B1app%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>知道有一个app叫做微光，可以多人一起在线看电视电影听音乐等，实质上类似于直播形式的点播应用。虽然很好用，但是其存在两个问题：一是所能看的视频都由用户申请后才可能添加，资源很有限，就是说只能是看上面有什么想看的看什么，而不能想看什么看什么；二是由于其资源由平台提供，存在很大的版权问题。<br>为了能够将自己本地有的视频资源在多终端同步观看，计划开发一个app。</p>
<span id="more"></span>
<h1 id="整体规划（草稿，随日志更新）"><a href="#整体规划（草稿，随日志更新）" class="headerlink" title="整体规划（草稿，随日志更新）"></a>整体规划（草稿，随日志更新）</h1><p>整个项目将分为客户端服务端两部分。<br>初期简化考虑，客户端仅支持iOS，需要具备创建房间、选择本地文件、推流、记录播放进度、进入房间、拉流等功能。服务端仅支持linux，需具备直播服务器、房间信息管理等功能。<br>为了学习新技术及便于移植，计划iOS开发使用Flutter，服务端开发使用Go。<br>App流程应为：   </p>
<ol>
<li>创建房间与服务端交互，获得一对token，分别为房主身份和房客身份，同时服务端创建唯一直播服务器地址；<br>【低优先级。初步使用固定地址，之后可使用多端口或多路径，再之后考虑CDN或P2P】</li>
<li>选择本地视频，开始推流，推流同时记录播放进度；</li>
<li>房客使用token进入房间，拉流播放；</li>
<li>可利用记录的播放进度进行重新推流以进行同步，也可考虑支持手动调节进度。</li>
</ol>
<h1 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h1><h3 id="2020-03-14"><a href="#2020-03-14" class="headerlink" title="2020-03-14"></a>2020-03-14</h3><ul>
<li><p>测试本地macOS使用<code>ffmpeg</code>推流rtmp，服务端使用找到的一个golang编写的直播服务器<a href="https://github.com/gwuhaolin/livego"><code>golive</code></a>，手机端使用VLC播放体验。   </p>
<ol>
<li>本地推流命令： <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">% brew install ffmpeg
% ffmpeg -re -i &lt;本地文件路径&gt; -c copy -f flv &lt;rtmp服务器地址&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>使用livego： <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">% git clone https:&#x2F;&#x2F;github.com&#x2F;gwuhaolin&#x2F;livego.git
% go build
% .&#x2F;livego<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
</ul>
<h3 id="2020-03-16"><a href="#2020-03-16" class="headerlink" title="2020-03-16"></a>2020-03-16</h3><ul>
<li><p>要支持将手机本地视频推流到服务器，肯定先得支持读取本地文件，找到Flutter pub包<a href="https://pub.flutter-io.cn/packages/path_provider"><code>path_provider</code></a>   </p>
<ol>
<li>使用path_provider，在Flutter项目的<mark>pubspec.yaml</mark>中<mark>dependencies</mark>下加入<mark>path_provider: ^1.6.5</mark>    <pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:io'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'dart:async'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'package:path_provider/path_provider.dart'</span><span class="token punctuation">;</span>
   
<span class="token comment">//获取应用文档目录</span>
String dir <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">getApplicationDocumentsDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>path<span class="token punctuation">;</span>
<span class="token comment">//创建文件</span>
File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">'$dir/counter.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//文档读取</span>
String content <span class="token operator">=</span> <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">readAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//文档写入</span>
<span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">writeAsString</span><span class="token punctuation">(</span><span class="token string">'$_counter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>要想让App的文档目录在iOS的“文件”中可见，需要在<mark>Info.plist</mark>文件中添加键值对： <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>UIFileSharingEnabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>LSSupportsOpeningDocumentsInPlace<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
 这一步可在Flutter的VS Code环境中<code>ios/Runner</code>目录中修改，也可打开Xcode修改。    <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">% open ios&#x2F;Runner.xcworkspace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
<li><p>要实现iOS端推流，需要在iOS端集成ffmpeg。找到Flutter pub包<a href="https://pub.flutter-io.cn/packages/flutter_ffmpeg">flutter_ffmpeg</a></p>
<ol>
<li><p>使用flutter_ffmpeg，在Flutter项目的<mark>pubspec.yaml</mark>中<mark>dependencies</mark>下加入<mark>flutter_ffmpeg: ^0.2.10</mark></p>
</li>
<li><p>iOS使用flutter_ffmpeg，还需要修改<code>Podfile</code>的<code># Plugin Pods</code>部分如下：</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java">symlink <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'.symlinks'</span><span class="token punctuation">,</span> <span class="token string">'plugins'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">symlink</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> symlink<span class="token punctuation">)</span>
<span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'flutter_ffmpeg'</span>
  pod name<span class="token operator">+</span><span class="token string">'/&lt;package name>'</span><span class="token punctuation">,</span> <span class="token operator">:</span>path <span class="token operator">=</span><span class="token operator">></span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>symlink<span class="token punctuation">,</span> <span class="token string">'ios'</span><span class="token punctuation">)</span>
<span class="token keyword">else</span>
  pod name<span class="token punctuation">,</span> <span class="token operator">:</span>path <span class="token operator">=</span><span class="token operator">></span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>symlink<span class="token punctuation">,</span> <span class="token string">'ios'</span><span class="token punctuation">)</span>
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 <div class="note info"><p>若找不到Podfile，尝试执行run后会生成</p>
</div></li>
<li><p>flutter_ffmpeg测试推流成功：</p>
 <pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter_ffmpeg/flutter_ffmpeg.dart'</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> FlutterFFmpeg _flutterFFmpeg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlutterFFmpeg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
String dir <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">getApplicationDocumentsDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>path<span class="token punctuation">;</span>
_flutterFFmpeg
  <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>
    <span class="token string">"-re -i $dir/&lt;视频文件名> -c copy -f flv &lt;直播服务器地址>"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"FFmpeg process exited with rc $rc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>在安装这些包，尝试运行时常遇到卡在<strong>Pod Installing</strong>的状态，可尝试单独执行下面命令：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">% pod install --verbose <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>视频播放部分，考虑使用Flutter版的ijkplayer中……</p>
</li>
</ul>
<h3 id="2020-03-17"><a href="#2020-03-17" class="headerlink" title="2020-03-17"></a>2020-03-17</h3><ul>
<li>经过一晚的测试，发现<a href="https://pub.flutter-io.cn/packages/flutter_ijkplayer"><code>flutter_ijkplayer</code></a>主要存在两个问题：   <ol>
<li>加入该包后会出现闪退，经调试发现，可能的原因是其本身也是基于ffmpeg的，所以会与已经引入的flutter_ffmpeg相冲突，当两个包都被引入，只要调用ffmpeg就会闪退；</li>
<li>后暂时去掉flutter_ffmpeg包，仅引入此包，发现无论播放本地mp4还是播放rtmp地址视频，均是有声音无图像（黑屏）。初步查询问题时根据网上说法以为可能是对mp4格式支持问题（但同时播放采用flv的rtmp流也有这问题其实可以排除这种可能性），尝试<a href="https://github.com/CaiJingLong/flutter_ijkplayer/blob/master/compile-cn.md">修改编译选项自编译flutter_ijkplayer</a>，发现本身其默认编译选项就是很全的，而且替换为自编译的包之后，依然同样问题。后阅读flutter_ijkplayer的<a href="https://github.com/CaiJingLong/flutter_ijkplayer/blob/master/TODOLIST.md">TODOList</a>，发现其中写道：<ul>
<li><input checked="" disabled="" type="checkbox"> <mark>iOS 部分视频无法显示图像的问题: 可能很长时间内都无法解决</mark>   </li>
</ul>
</li>
</ol>
</li>
<li>本身该包的使用方法还是记录一下吧：   <ol>
<li>在Flutter项目的<mark>pubspec.yaml</mark>中<mark>dependencies</mark>下加入<mark>flutter_ijkplayer: ^0.3.5+1</mark><br>另外从本地和从Git引入包的方式为： <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">flutter_ijkplayer</span><span class="token punctuation">:</span> 
  <span class="token key atrule">path</span><span class="token punctuation">:</span> ./flutter_ijkplayer

<span class="token key atrule">flutter_ijkplayer</span><span class="token punctuation">:</span>
  <span class="token key atrule">git</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/CaiJingLong/flutter_ijkplayer.git
    <span class="token key atrule">ref</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>使用代码如下：    <pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter_ijkplayer/flutter_ijkplayer.dart'</span><span class="token punctuation">;</span>

String dir <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">getApplicationDocumentsDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>path<span class="token punctuation">;</span>
<span class="token keyword">await</span> controller<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>DataSource<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token function">File</span><span class="token punctuation">(</span><span class="token string">'$dir/BCSS05E01.mp4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>autoPlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// await controller.setNetworkDataSource('&lt;rtmp服务器地址>',autoPlay:true);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li>开始尝试其他Flutter下的播放器：分别尝试了<a href="https://pub.flutter-io.cn/packages/flutter_vlc_player">flutter_vlc_player</a>【本身体积比较大，且编译无法通过，会出现precompile issue，搁置】和<a href="video_player">video_player</a>【编译正常，但使用中控件总是不显示，判断<code>controller.value.initialized</code>总为<strong>false</strong>】</li>
<li>又尝试了一遍flutter_ijkplayer，使用线上版本，发现可以播放rtmp地址视频了！但是似乎有些不稳定。</li>
</ul>
<h3 id="2020-03-20"><a href="#2020-03-20" class="headerlink" title="2020-03-20"></a>2020-03-20</h3><ul>
<li><p>之前尝试flutter_ijkplayer成功，但是依然存在和flutter_ffmpeg冲突的问题。这是因为两者最底层都用到了ffmpeg，从而导致有duplicated symbol。另外，flutter_ijkplayer基于的ffmpeg版本本身是3.4的（可更改支持到4.0），而flutter_ffmpeg基于的mobile_ffmpeg是基于ffmpeg4.3的，这两者版本也不一致。</p>
</li>
<li><p>经过两天多的痛苦尝试，终于有了进展：</p>
<ul>
<li><p>先将<code>flutter_ijkplayer</code>的使用方式更改为本地包的使用方式：   </p>
<ol>
<li>将<a href="https://github.com/CaiJingLong/flutter_ijkplayer">flutter_ijkplayer包</a>下到本地，放置在flutter项目目录中；</li>
<li>获取<a href="https://gitee.com/kikt/ijkplayer_thrid_party.git">ijkplayer</a>源码进行本地编译，修改<code>init-ios.sh</code> <pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">IJK_FFMPEG_COMMIT&#x3D;ff4.0--ijk0.8.25--20200221--001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
 修改<code>config/module.sh</code> <pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#下面注释掉是因为升级ffmpeg到4.0版
#export COMMON_FF_CFG_FLAGS&#x3D;&quot;$COMMON_FF_CFG_FLAGS --disable-ffserver&quot;
#export COMMON_FF_CFG_FLAGS&#x3D;&quot;$COMMON_FF_CFG_FLAGS --disable-vda&quot;

#下面添加muxer是因为后面步骤需要支持flv的output format
export COMMON_FF_CFG_FLAGS&#x3D;&quot;$COMMON_FF_CFG_FLAGS --enable-muxer&#x3D;flv&quot;

#下面两个不确定是否要加（源于升级到4.0版ffmpeg）
export COMMON_FF_CFG_FLAGS&#x3D;&quot;$COMMON_FF_CFG_FLAGS --disable-protocol&#x3D;https&quot;
export COMMON_FF_CFG_FLAGS&#x3D;&quot;$COMMON_FF_CFG_FLAGS --disable-bsf&#x3D;eac3_core&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>执行如下命令进行编译： <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">% ./init-config.sh
% ./init-ios.sh

% <span class="token builtin class-name">cd</span> ios
% ./compile-ffmpeg.sh clean
% ./compile-common.sh
% <span class="token function">open</span> ios/IJKMediaPlayer/IJKMediaPlayer.xcodeproj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>Edit Scheme中修改Run的构建配置为Release，然后分别选择构建目标为模拟器（如iPhone 8 Pus）和真机（Generic iOS Device），按<code>Command+b</code>进行编译构建；</li>
<li>之后进入生成的framework目录，将真机和模拟器库合并为通用库： <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">% <span class="token builtin class-name">cd</span> ~/Library/Developer/Xcode/DerivedData/IJKMediaPlayer-?????????/Build/Products
% lipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework
% <span class="token function">cp</span> IJKMediaFramework Release-iphoneos/IJKMediaFramework.framework
% <span class="token function">open</span> Release-iphoneos/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>将得到的<code>IJKMediaFramework.framework</code>复制进前面第一步flutter_ijkplayer目录中ios目录下；</li>
<li>本地包的引入为修改<code>pubspec.yaml</code>的依赖项如下： <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">flutter_ijkplayer</span><span class="token punctuation">:</span> <span class="token comment">#^0.3.5+1</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> ./flutter_ijkplayer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
 在flutter_ijkplayer本地包的ios/.podspec中修改如下： <pre class="line-numbers language-podspec" data-language="podspec"><code class="language-podspec">s.ios.vendored_frameworks &#x3D; &#39;IJKMediaFramework.framework&#39;
s.frameworks  &#x3D; &quot;AudioToolbox&quot;, &quot;AVFoundation&quot;, &quot;CoreGraphics&quot;, &quot;CoreMedia&quot;, &quot;CoreVideo&quot;, &quot;MobileCoreServices&quot;, &quot;OpenGLES&quot;, &quot;QuartzCore&quot;, &quot;VideoToolbox&quot;, &quot;Foundation&quot;, &quot;UIKit&quot;, &quot;MediaPlayer&quot;
s.libraries   &#x3D; &quot;bz2&quot;, &quot;z&quot;, &quot;stdc++&quot;
#s.dependency &#39;FlutterIJK&#39;, &#39;~&gt; 0.2.3&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>接下来就是尝试将<code>mobile-ffmpeg</code>整合进<code>ijkplayer</code>，尝试将<code>flutter_ffmpeg</code>整合进<code>flutter_ijkplayer</code>。其中前两者是iOS库，后两者是Flutter包。在整合过程中本着最小化原则，且尽可能只做增量。   </p>
<ol>
<li>【mobile-ffmpeg】入【ijkplayer】：在上一环节第3步后，在打开的Xcode中进行操作，将下列文件拖拽复制添加在左侧工程文件树的<code>Classses/IJKFFMoviePlayerController/ijkmedia/ijkplayer</code>下： <pre class="line-numbers language-none"><code class="language-none">mobileffmpeg.c
mobileffmpeg.h
ffmpeg.c
ffmpeg.h
cmdutils.c
cmdutils.h
ffmpeg_opt.c
av_device.h
av_device.c
ffmpeg_hw.c
ffmpeg_filter.c
exception.c
exception.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 其实以添加mobile_ffmpeg为主，逐渐发现编译问题及后期加入Flutter项目之后编译问题再慢慢修改添加。</li>
<li>【mobile-ffmpeg】入【ijkplayer】：依然在Xcode中，修改<code>Classses/IJKFFMoviePlayerController/ffmpeg/IJKFFMoviePlayerController.h</code>加入接口函数声明： <pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">+ (int)executeWithArguments: (NSArray*)arguments;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
 修改<code>Classses/IJKFFMoviePlayerController/ffmpeg/IJKFFMoviePlayerController.m</code>加入接口函数： <pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">+ (int)executeWithArguments: (NSArray*)arguments &#123;
  
  char **commandCharPArray &#x3D; (char **)av_malloc(sizeof(char*) * ([arguments count]));
  for (int i&#x3D;0; i &lt; [arguments count]; i++) &#123;
    NSString *argument &#x3D; [arguments objectAtIndex:i];
    commandCharPArray[i] &#x3D; (char *) [argument UTF8String];
  &#125;

  int lastReturnCode &#x3D; mobileffmpeg_execute(([arguments count]), commandCharPArray);

  av_free(commandCharPArray);
  return lastReturnCode;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 <div class="note info"><p>注意：修改完成后重复进行前一环节的后续步骤。</p>
</div>   </li>
<li>【flutter-ffmpeg】入【fluter-ijkplayer】：在本地包flutter_ijkplayer下<code>lib/src/controller.dart</code>下加入如下代码： <pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">parseArguments</span><span class="token punctuation">(</span>String command<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  List<span class="token operator">&lt;</span>String<span class="token operator">></span> argumentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  StringBuffer currentArgument <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  bool singleQuoteStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  bool doubleQuoteStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> command<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> previousChar<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      previousChar <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">codeUnitAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      previousChar <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">var</span> currentChar <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">codeUnitAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentChar <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">.</span><span class="token function">codeUnitAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>singleQuoteStarted <span class="token operator">||</span> doubleQuoteStarted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        currentArgument<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>currentChar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>currentArgument<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        argumentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentArgument<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        currentArgument <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>currentChar <span class="token operator">==</span> <span class="token string">'\''</span><span class="token punctuation">.</span><span class="token function">codeUnitAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span>previousChar <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> previousChar <span class="token operator">!=</span> <span class="token string">'\\'</span><span class="token punctuation">.</span><span class="token function">codeUnitAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>singleQuoteStarted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        singleQuoteStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>doubleQuoteStarted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        currentArgument<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>currentChar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        singleQuoteStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>currentChar <span class="token operator">==</span> <span class="token string">'\"'</span><span class="token punctuation">.</span><span class="token function">codeUnitAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span>previousChar <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> previousChar <span class="token operator">!=</span> <span class="token string">'\\'</span><span class="token punctuation">.</span><span class="token function">codeUnitAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>doubleQuoteStarted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        doubleQuoteStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>singleQuoteStarted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        currentArgument<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>currentChar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        doubleQuoteStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      currentArgument<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>currentChar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentArgument<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    argumentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentArgument<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> argumentList<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
Future<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">executeWithArguments</span><span class="token punctuation">(</span>String arguments<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
  _ijkStatus <span class="token operator">=</span> IjkStatus<span class="token punctuation">.</span>preparing<span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">_initDataSource</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> Map<span class="token operator">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _plugin
  <span class="token punctuation">.</span><span class="token function">executeFFmpegWithArguments</span><span class="token punctuation">(</span>arguments<span class="token punctuation">:</span> <span class="token function">parseArguments</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  _ijkStatus <span class="token operator">=</span> IjkStatus<span class="token punctuation">.</span>prepared<span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">'rc'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 在<code>lib/src/controller/plugin.dart</code>中加入如下代码： <pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">Future<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">>></span> <span class="token function">executeFFmpegWithArguments</span><span class="token punctuation">(</span>
  <span class="token punctuation">&#123;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> arguments<span class="token punctuation">&#125;</span> <span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isDisposed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> channel<span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token string">"executeFFmpegWithArguments"</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token string">'arguments'</span><span class="token punctuation">:</span> arguments<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>【flutter-ffmpeg】入【fluter-ijkplayer】：在本地包flutter_ijkplayer下<code>ios/Classes/CoolFlutterIJK.m</code>中增加如下代码： <pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">- (NSDictionary *)toIntDictionary:(NSString*)key :(NSNumber*)value &#123;
   NSMutableDictionary *dictionary &#x3D; [[NSMutableDictionary alloc] init];
   dictionary[key] &#x3D; value;
   return dictionary;
 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 在<code>handleMethodCall</code>方法中头部加定义，并在其中判断<code>call.method</code>的判断语句中加入分支如下： <pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">NSArray* arguments &#x3D; call.arguments[@&quot;arguments&quot;];
NSString* command &#x3D; call.arguments[@&quot;command&quot;];
NSString* delimiter &#x3D; call.arguments[@&quot;delimiter&quot;];

else if   ([@&quot;executeFFmpegWithArguments&quot; isEqualToString:call.method]) &#123;
  NSLog(@&quot;Running FFmpeg with arguments: %@.\n&quot;, arguments);
  dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;
    int rc &#x3D; [IJKFFMoviePlayerController executeWithArguments:arguments];
    NSLog(@&quot;FFmpeg exited with rc: %d\n&quot;, rc);
    result([self toIntDictionary:@&quot;rc&quot; :[NSNumber numberWithInt:rc]]);
  &#125;);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
如上述这几步骤后，即可令flutter_ffmpeg的主要功能“带参数执行ffmpeg命令”引入flutter_ijkplayer。但后来编译还发现<code>ffmpeg.c</code>中存在个小问题（似乎是fd_set溢出）如下修复:   <pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;*
fd_set rfds;
FD_ZERO(&amp;rfds);
FD_SET(0, &amp;rfds);
*&#x2F;
struct pollfd rfds;
rfds.fd&#x3D;0;
rfds.events&#x3D;POLLIN;
    
tv.tv_sec &#x3D; 0; &#x2F;&#x2F;未改动
tv.tv_usec &#x3D; 0; &#x2F;&#x2F;未改动
    
&#x2F;&#x2F; n &#x3D; select(1, &amp;rfds, NULL, NULL, &amp;tv);
    
n&#x3D;poll(&amp;rfds,1,&amp;tv);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>经过前面的整合，在Flutter项目中使用<code>controller.executeWithArguments</code>和<code>controller.setNetworkDataSource</code>均可成功了（需要注意这两个均是async函数，谨慎使用await放置前一操作的等待阻拦后一操作）</p>
</li>
<li><p>但如此做似乎仍然存在问题，那便是在点击按钮执行一次<code>executeWithArguments</code>后如果再点一次按钮执行此操作即会闪退。这个问题还需要解决，因为app中可能存在需求需要在已发推流后重发推流。那么这种需要两种实现，要么设法取消前一命令，要么重推一命令覆盖掉前一命令。前者需研究如何实现通信，后者则需解决当前的这个“再触发闪退问题”。   </p>
</li>
</ul>
</li>
</ul>
<h3 id="2020-03-24"><a href="#2020-03-24" class="headerlink" title="2020-03-24"></a>2020-03-24</h3><ul>
<li>如之前记录，尝试将flutter_ffmpeg（mobile_ffmpeg）整合进flutter_ijkplayer后出现在第一次发出ffmpeg命令后再次发出会有读空数据的情况导致闪退。认为该情况是由于某种原因在再次执行命令时，使得前一次或后一次执行的变量被清除所致。</li>
<li>由于之前是尝试代码级整合，就用的和ijkplayer使用的ffmpeg版本（4.0）最接近的旧版mobile_ffmpeg（v2.0）。然后和flutter_ffmpeg插件使用的最新版mobile_ffmpeg进行比对，发现新版中很多变量被改为<code>__thread</code>(即线程本地)的，怀疑此可以解决变量被清除的问题。于是尝试手动对照修改已整合入的旧版的代码。但是经过尝试，发现改完后虽然不会闪退，但却出现更坏情况，命令参数解析的环节报错无效参数“-re”，断入手动追踪，发现在“cmdutil.c”中的<code>split_commandline()</code>函数while循环中第一处if判断时还为正常“-re”值得opt在第二处if时就变成了NULL……之后经过再三思考与查询，也并未有头绪。</li>
<li>之后索性放弃代码级整合，尝试直接将最新版mobile_ffmpeg（及flutter_ffmpeg）的外层代码（及除ffmpeg之外由mobile_ffmpeg添加的，位于<code>mobile_ffmpeg/ios/src</code>）文件直接引入使用，即改为文件级别整合：<ul>
<li>最初的步骤跟前面的一样，构建flutter_ijkplayer本地库（使用ffmpeg4.0）；</li>
<li>之后将mobile_ffmpeg（最新版）整合进ijkplayer framework的方式为：<ul>
<li>将下列文件Xcode中放入IJKMediaFramework工程的<code>Classes/IJKFFMoviePlayerController/ffmpeg</code>下：<pre class="line-numbers language-none"><code class="language-none">mobileffmpeg_exception.h
mobileffmpeg_exception.m
MobileFFmpeg.h
MobileFFmpeg.m
ArchDetect.h
ArchDetect.m
LogDelegate.h
MediaInformation.h
MediaInformation.m
MediaInformationParser.h
MediaInformationParser.m
MobileFFmpegConfig.h
MobileFFmpegConfig.m
MobileFFprobe.h
MobileFFprobe.m
Statistics.h
Statistics.m
StatisticsDelegate.h
StreamInformation.h
StreamInformation.m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>将下列文件Xcode放入IJKMediaFramework工程的<code>Classes/IJKFFMoviePlayerController/ijkmedia/ijkplayer</code>下：<pre class="line-numbers language-none"><code class="language-none">attributes.h
avdevice.h
avio.h
fftools_cmdutils.c
fftools_cmdutils.h
fftools_ffmpeg_filter.c
fftools_ffmpeg_hw.c
fftools_ffmpeg_opt.c
fftools_ffmpeg.c
fftools_ffmpeg.h
fftools_ffprobe.c
intfloat.h
libm.h
mathematics.h
network.h
os_support.h
url.h
version.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>之后将其中一些include路径进行订正（因为由原目录层级变成可直接使用的）</li>
<li>需要将之后要暴露在framework库外供Flutter Plugin调用的头文件设置为公共可见<br><img data-src="/images/ST/FrameworkHeadList.png" alt="Framework库头文件设置">   </li>
</ul>
</li>
<li>将flutter_ffmpeg整合入flutter_ijkplayer插件，最开始是想依然将原文件保留（即进行文件级别整合），但是会出现invokeMethod无法在Channel中找到的情况，后来发现，flutter插件需要在其<code>pubspec.yaml</code>中<code>flutter-&gt;plugin-&gt;platforms-&gt;ios-&gt;pluginClass</code>设置插件类，之后在构建过程中便会由此在项目（而非插件）的<code>ios/Runner</code>下生成<code>GeneratedPluginRegistrant.h</code>和<code>GeneratedPluginRegistrant.m</code>。其m文件结构如下：<br><img data-src="/images/ST/GeneratedPluginRegistrant.png" alt="GeneratedPluginRegistrant"><br>也即是说，只有登记在插件的<code>pubspec.yaml</code>中的插件类，才会被调用其<code>registerWithRegistrar</code>方法，从而注册MethodChannel等。尝试在一个插件的pubspec中注册两个插件类，似乎没有办法。于是，也只能在Flutter插件这边，Dart文件进行文件级整合、iOS实现进行代码（类）级别整合：<ul>
<li>将flutter_ffmpeg插件的lib中两个dart文件<code>flutter_ffmpeg.dart</code>和<code>log_level.dart</code>复制到本地flutter_ijkplayer的lib文件夹中；</li>
<li>将前一步骤生成的Framework目录放入本地flutter_ijkplayer的ios文件夹中；</li>
<li>在flutter_ijkplayer的ios文件夹中将IjkplayerPlugin.m修改如下：<ul>
<li>加入<pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">#import &lt;IJKMediaFramework&#x2F;IJKMediaFramework.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>将全局常量、成员变量和方法、invokeMethod的判断分支整合到<code>IjkplayerPlugin</code>中;</li>
</ul>
</li>
</ul>
</li>
<li>在使用时即可flutter项目只设置pubspec使用本地修改过的flutter_ijkplayer，在需要用到flutter_ffmpeg的方法时<code>import &#39;package:flutter_ijkplayer/flutter_ffmpeg.dart&#39;;</code></li>
</ul>
</li>
<li>至此，flutter选择文件、执行推流命令、拉流播放的基本功能点打通。接下来暂时不考虑客户端了，因为客户端除UI/UE外功能部分剩余为播放时间点记录与同步、创建进入房间，而这两点基本都需要仰仗于服务端，故接下来的计划是先改造服务端golang版流媒体服务器livego。</li>
</ul>
<h1 id="持续更新中……"><a href="#持续更新中……" class="headerlink" title="持续更新中……"></a>持续更新中……</h1>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Dart</tag>
        <tag>编程</tag>
        <tag>计算机</tag>
        <tag>iOS</tag>
        <tag>Fluter</tag>
      </tags>
  </entry>
  <entry>
    <title>Dart学习笔记（一）语言基础</title>
    <url>/2020/03/05/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>作为Flutter和下一代系统Fuchsia‘钦定’的语言，Dart还是有兴了解一下的。<br>安装方式，在已经有brew的macOS系统下很简单：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ brew tap dart-lang&#x2F;dart
$ brew install dart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如需升级更新Dart SDK版本的话，直接使用<code>brew upgrade dart</code>即可。<br>查看已安装dart版本信息，使用<code>brew info dart</code>   </p>
<span id="more"></span>
<p>一般来说学新语言都会有个hello world程序，主要目的在于观察这种语言与已掌握语言有哪些地方长得像，又有哪些地方长得不像。其实各种语言也许底层实现、编译翻译方式、SDK函数API及一些高级用法会有很大差别，但最基本的地方往往彼此彼此。下面就是官方给的一个小例子：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">// 定义函数</span>
<span class="token function">printInteger</span><span class="token punctuation">(</span>int aNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'The number is $aNumber.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印到控制台</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 应用开始执行的地方</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// 声明及初始化变量</span>
  <span class="token function">printInteger</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用函数</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由上面例子对于Dart程序基本风格也就可见一斑了。</p>
<h1 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h1><ul>
<li>能放进一个变量的任何东西都是一个<strong>对象</strong>，而每个对象都是一个<strong>类</strong>的实例。即使是数、函数和<code>null</code>这样的也是对象。所有的对象继承自<code>Object</code>类</li>
<li>尽管Dart是强类型的，类型注解却因为Dart可自推断类型而是可选的（如上面小例子中<code>number</code>变量的类型会被推断为<code>int</code>）。当需要明确指定无类型时，<a href="https://dart.dev/guides/language/effective-dart/design#do-annotate-with-object-instead-of-dynamic-to-indicate-any-object-is-allowed">使用特殊类型<code>dynamic</code></a>。</li>
<li>Dart支持泛型，如<code>List&lt;int&gt;</code>或<code>List&lt;dynamic&gt;</code></li>
<li>Dart支持顶级函数（如<code>main()</code>），亦或函数绑定给一个类或对象（分别为静态<code>static</code>和实例<code>instance</code>方法）。你也可以在函数内创建函数（内嵌<code>nested</code>或本地<code>local</code>函数）</li>
<li>类似的，Dart支持顶级变量、类或对象的变量。实例变量即域或者属性。【好吧，其实只是名字怎么叫的问题】</li>
<li>不同于Java的是，Dart没有诸如public、protected、private这样的关键字。当标识符以下划线（_）开始，即表示在它的库中为私有。详见<a href="https://dart.dev/guides/language/language-tour#libraries-and-visibility"><code>Libraries and visibility</code></a></li>
<li>标识符可以字母或下划线开头，后跟字母数字下划线的组合。（和其他大部分语言一样）</li>
<li>Dart有表达式和语句。（学过其他语言的这个没什么好解释的，辛苦官网还特意举例解释了。。。）</li>
<li>Dart工具可以报告warning和error。（好吧，也是废话。。。）</li>
</ul>
<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p>官网列举了Dart语言的关键字，告知应当避免以它们为标识符。还说除了保留字，另外一些关键字可以用作标识符。然而这一般情况下没什么意义，尤其是对于初学者而言，在玩出这些花之前，标识符（变量、函数、类、对象等的名称）的选取还是应当以准确表意为妥，也就会自然避开不可用关键字。</p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量存储引用，如<code>var name = &#39;Bob&#39;;</code>中<code>name</code>含有到值为“Bob”的字符串对象的引用。<br><code>name</code>变量的类型被推断为<code>String</code>，但你可以通过指定来改变它的类型。</p>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>未初始化的变量有初始值null，包括数值类型的。（因为数值像其他Dart中所有事物一样是对象）</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">int lineCount<span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>lineCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<div class="note info"><p>生产代码忽略<code>assert()</code>的调用。在开发中，<code>assert(condition)</code>在condition为false时抛出异常。</p>
</div>
<h2 id="final和const"><a href="#final和const" class="headerlink" title="final和const"></a>final和const</h2><p>如果永远不改变一个变量，使用<code>final</code>或<code>const</code>来替代<code>var</code>或添加在类型前。一个final变量只能被赋值一次，一个const变量是编译时常量（自然也暗含final之意）。final的顶级或类变量在首次使用时初始化。</p>
<div class="note info"><p>实例变量可以是<code>final</code>但不能是<code>const</code></p>
</div>
<p>如果const变量是类级的，标记为<code>static const</code>。const变量需要在声明时设置它的值。</p>
<h1 id="内建类型"><a href="#内建类型" class="headerlink" title="内建类型"></a>内建类型</h1><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>Dart内数值类型有两种，<code>int</code>和<code>double</code>。<br><code>int</code>类型不大于64位（8字节），这取决于平台。Dart VM中值可以从-2<sup>63</sup>到2<sup>63</sup>-1，若编译到JavaScript则使用JS的数值范围为-2<sup>53</sup>到2<sup>53</sup>-1<br><code>double</code>为IEEE 754标准规定的64位双精度浮点数值。<br>这两种都是<code>num</code>类型的子类型。包含基本运算符+-*/，也可使用<code>abs()</code>、<code>ceil()</code>、<code>floor()</code>等方法。（位移运算符如&gt;&gt;定义在<code>int</code>类中）<br>自Dart2.1开始，int型在必要时会自动转换为double型。<br>下面是常见的数值和字符串的转换：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">// String -> int</span>
<span class="token keyword">var</span> one <span class="token operator">=</span> int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>one <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// String -> double</span>
<span class="token keyword">var</span> onePointOne <span class="token operator">=</span> double<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'1.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>onePointOne <span class="token operator">==</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// int -> String</span>
String oneAsString <span class="token operator">=</span> <span class="token number">1.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>oneAsString <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// double -> String</span>
String piAsString <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">.</span><span class="token function">toStringAsFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>piAsString <span class="token operator">==</span> <span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>字面数值是编译时常量，许多算术表达式在其操作数为编译时常量时也是编译时常量，会被计算为数值。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>Dart中字符串是UTF16编码单元的串。可以使用单引号或者双引号创建。<br>可以使用<code>$&#123;expression&#125;</code>讲表达式值放进字符串中，对于对象Dart会调用对象的<code>toString()</code>方法。</p>
<div class="note info"><p><code>==</code>运算符测试两个对象是否相等，对于两个字符串在它们包含相同编码单元序列时相等。</p>
</div>
<p>对于字符串的连接，可以使用<code>+</code>运算符或是简单的让字符串相邻。<br>创建多行字符串使用三引号如<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code><br>可以在字符串引号前加<code>r</code>来创建raw字符串，raw字符串不会对内容进行转义。</p>
<h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>Dart有<code>bool</code>类型用以表达布尔值，true和false。<br>Dart的类型安全不允许使用诸如<code>if (非布尔类型值)</code>或者<code>assert (非布尔类型值)</code>，对一些特殊值的检查必须明确：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">// 检查空字符串</span>
<span class="token keyword">var</span> fullName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>fullName<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检查0值</span>
<span class="token keyword">var</span> hitPoints <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>hitPoints <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检查null.</span>
<span class="token keyword">var</span> unicorn<span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>unicorn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检查NaN.</span>
<span class="token keyword">var</span> iMeantToDoThis <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>iMeantToDoThis<span class="token punctuation">.</span>isNaN<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>在Dart中，数组为<code>List</code>对象，所以被直接称为列表。Dart的列表形式类似JS<code>var list = [1, 2, 3];</code>，在Dart中这个列表被推断为<code>List&lt;int&gt;</code>类型，所以如果尝试为它添加非整型对象，分析器或运行时会报错。<br>列表使用0基索引（类C），可以像JS中一样去获取列表长度或指定元素（如<code>list.length</code>和<code>list[1]</code>）。<br>Dart2.3起引入了<strong>展开操作符</strong>（<code>...</code>）和<strong>空感知展开操作符</strong>（<code>...?</code>）以提供简明方式插入多元素。</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>list<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> list<span class="token punctuation">;</span>
<span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">?</span>list<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Dart2.3同时还引入了收集if（collection if）和收集for，以根据条件或重复构建集合。</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">//收集if</span>
<span class="token keyword">var</span> nav <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">'Home'</span><span class="token punctuation">,</span>
  <span class="token string">'Furniture'</span><span class="token punctuation">,</span>
  <span class="token string">'Plants'</span><span class="token punctuation">,</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>promoActive<span class="token punctuation">)</span> <span class="token string">'Outlet'</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//收集for</span>
<span class="token keyword">var</span> listOfInts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> listOfStrings <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">'#0'</span><span class="token punctuation">,</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> listOfInts<span class="token punctuation">)</span> <span class="token string">'#$i'</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>listOfStrings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>Dart中集合是不重复项目的无序收集。（集合的字面表达在Dart2.2才引入）  </p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> halogens <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'fluorine'</span><span class="token punctuation">,</span> <span class="token string">'chlorine'</span><span class="token punctuation">,</span> <span class="token string">'bromine'</span><span class="token punctuation">,</span> <span class="token string">'iodine'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上面这个集合会被自动推断为<code>Set&lt;String&gt;</code>，便不能添加其他错误类型值。<br>关于创建空集合，参见下面：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// Set&lt;String> names = &#123;&#125;; //这样亦可</span>
<span class="token comment">// var names = &#123;&#125;; //这样创建的是一个map而非集合，推断为 Map&lt;dynamic,dynamic></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>使用<code>.length</code>获取集合元素数量。使用<code>.add(元素)</code>或<code>.addAll(集合)</code>来添加项目。<br>与前面的列表类似，集合也支持展开操作符和收集if、收集for等。</p>
<h2 id="Maps（映射？）"><a href="#Maps（映射？）" class="headerlink" title="Maps（映射？）"></a>Maps（映射？）</h2><p>一个map是关于键与值之间的关联，键和值都可以是任意类型对象。每个键只能出现一次，但值可相同。<br>map的创建可以直接赋值创建，也可以通过Map构造器创建：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'helium'</span><span class="token punctuation">,</span>
  <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'neon'</span><span class="token punctuation">,</span>
  <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">'argon'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'partridge'</span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string">'second'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'turtledoves'</span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string">'fifth'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'golden rings'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info"><p>上面你可能本来期待看到的是<code>new Map()</code>，但Dart2中<code>new</code>关键字是可选的。</p>
</div>
<p>上面的创建中其实也体现了该如何往map中添加新键值对，取值方法类似，都和JS中一样。如果所取的键在map中不存在，则返回<code>null</code>。同样支持<code>.length</code>得到map中键值对的数量。<br>和列表集合类似，也支持扩展操作符、收集if和收集for等。</p>
<h2 id="Runes和grapheme-clusters"><a href="#Runes和grapheme-clusters" class="headerlink" title="Runes和grapheme clusters"></a>Runes和grapheme clusters</h2><p>Unicode编码通过对于世界上所有的书写系统的每个字符进行独特数字编码。因为Dart字符串是UTF16编码单元序列。通常表达Unicode编码点的方式为\uXXXX,当不足或多于4位16进制时采用\u{XXXXX}类似的方式。<br>如果需要读写单独的Unicode字符，使用字符包中定义在String上的<code>characters</code>获取器，返回的为<code>Characters</code>对象，例子如下：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:characters/characters.dart'</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">var</span> hi <span class="token operator">=</span> <span class="token string">'Hi 🇩🇰'</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'The end of the string: $&#123;hi.substring(hi.length - 1)&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'The last character: $&#123;hi.characters.last&#125;\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果取决于运行环境，可能是类似下面这样：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ dart bin&#x2F;main.dart
Hi 🇩🇰
The end of the string: ???
The last character: 🇩🇰<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><p><code>Symbol</code>对象代表Dart中声明的一个操作符或标识符。这个可能永远也不会用到。😅</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>Dart是真面向对象语言，所以甚至函数都是对象并有类型<code>Function</code>。这意味着函数可以被赋值给变量或作为参数传给其他函数。你也可以当做一个函数来调用Dart类的实例。下面是一个函数的实现：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>尽管高效Dart推荐对公共API注解类型，但也可以省略类型：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">isNoble</span><span class="token punctuation">(</span>atomicNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>只有一个表达式的函数，可以用简短符号：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>符号<code>=&gt; expr</code>是<code>&#123; return expr; &#125;</code>的简略表达。</p>
<div class="note info"><p>只有表达式（而非语句）可以出现在=&gt;和;之间</p>
</div>
<p>函数可以有两种参数：必须的和可选的。必须参数在前，可选参数在后。可选参数可以是<code>命名参数</code>(<code>named</code>)或<code>位置参数</code>(<code>positional</code>)。</p>
<h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><h3 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h3><p>命名参数的定义和使用时形式如下：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>bool bold<span class="token punctuation">,</span> bool hidden<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>

<span class="token function">enableFlags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> hidden<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>尽管命名参数是可选参数，但可通过注解<code>@required</code>来指示参数是必须的(依赖<code>meta</code>包，需import <code>package:meta/meta.dart</code>)，如：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">Scrollbar</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>Key key<span class="token punctuation">,</span> <span class="token metadata symbol">@required</span> Widget child<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><p>用方括号标记参数为可选：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">String <span class="token function">say</span><span class="token punctuation">(</span>String from<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> <span class="token punctuation">[</span>String device<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'$from says $msg'</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>device <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">=</span> <span class="token string">'$result with a $device'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Bob says Howdy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">,</span> <span class="token string">'smoke signal'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Bob says Howdy with a smoke signal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h2><p>可以在定义函数时，使用<code>=</code>来定义参数默认值（无提供默认值时默认值为<code>null</code>）。</p>
<h2 id="main-函数"><a href="#main-函数" class="headerlink" title="main()函数"></a>main()函数</h2><p>每个应用必须有一个顶层<code>main()</code>函数作为应用的入口。其返回值为<code>void</code>且有一个可选参数（para）<code>List&lt;String&gt;</code>作为参数（args）。</p>
<h2 id="函数作为头等对象"><a href="#函数作为头等对象" class="headerlink" title="函数作为头等对象"></a>函数作为头等对象</h2><p>可以传递函数给另一个函数作为参数：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">printElement</span><span class="token punctuation">(</span>int element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 将printElement作为参数传递</span>
list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>printElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可赋值函数给变量：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> loudify <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'!!! $&#123;msg.toUpperCase()&#125; !!!'</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">loudify</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'!!! HELLO !!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>大部分函数是命名的，也可以创建没有名字的匿名函数（<code>anonymous</code>），或者有时叫做<code>lambda</code>或<code>closure</code>(闭包)</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apples'</span><span class="token punctuation">,</span> <span class="token string">'bananas'</span><span class="token punctuation">,</span> <span class="token string">'oranges'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'$&#123;list.indexOf(item)&#125;: $item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// list.forEach(</span>
<span class="token comment">//    (item) => print('$&#123;list.indexOf(item)&#125;: $item'));</span>
<span class="token comment">// 匿名函数这里=>后可以跟唯一的语句，注意和前面简略写法处区分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="词法范围"><a href="#词法范围" class="headerlink" title="词法范围"></a>词法范围</h2><p>Dart是词法范围语言，所以变量的作用域被代码静态的确定。</p>
<h2 id="词法闭包"><a href="#词法闭包" class="headerlink" title="词法闭包"></a>词法闭包</h2><p>词法闭包（closure）是函数在词法范围可访问一个变量而在原范围之外被调用。<br>参照下面例子理解：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">Function</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span>num addBy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>num i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> addBy <span class="token operator">+</span> i<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> add2 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> add4 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">add4</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="函数相等的判断"><a href="#函数相等的判断" class="headerlink" title="函数相等的判断"></a>函数相等的判断</h2><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 
  <span class="token keyword">void</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> x<span class="token punctuation">;</span>
  x <span class="token operator">=</span> foo<span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>foo <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>

  x <span class="token operator">=</span> A<span class="token punctuation">.</span>bar<span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>bar <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A的实例1</span>
  <span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A的实例2，注意v与w的不同</span>
  <span class="token keyword">var</span> y <span class="token operator">=</span> w<span class="token punctuation">;</span>
  x <span class="token operator">=</span> w<span class="token punctuation">.</span>baz<span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>baz <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>baz <span class="token operator">!=</span> w<span class="token punctuation">.</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>所有函数返回一个值，未指明的话<code>return null;</code>隐含加在函数体后。</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h2><p>基本和C一致（<code>-expr</code>取反，<code>~/</code>整除）。</p>
<h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><p>基本和C一致。<br>一般测试x、y代表的是否一样的事物使用==号（在少数情况下需要知道两个对象是否完全同一对象，使用<code>identical()</code>函数）。==操作符运作方式：   </p>
<ol>
<li>如果x或y是null，当两个都为null时为true否则为false</li>
<li>返回<code>x.==(y)</code>的结果（即==等操作符是第一个操作数的方法，可以被重写）</li>
</ol>
<h2 id="类型测试操作符"><a href="#类型测试操作符" class="headerlink" title="类型测试操作符"></a>类型测试操作符</h2><p><code>as</code>、<code>is</code>和<code>is!</code>为在运行时测试类型的操作符。<br>| 操作符 | 含义 |<br>|-|-|<br>| <code>as</code> | 类型转换，如<code>(emp as Person).firstName = &#39;Bob&#39;;</code>|<br>| <code>is</code> | 判断对象是否为指定类型 |<br>| <code>is!</code> | 判断对象是否非指定类型 |</p>
<h2 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h2><p>除了常规的赋值操作符，还有只在被赋值变量为null时才赋值的<code>??=</code>操作符。<br>另外复合赋值操作符类似C，如<code>+=</code>。</p>
<h2 id="逻辑操作符（类C）"><a href="#逻辑操作符（类C）" class="headerlink" title="逻辑操作符（类C）"></a>逻辑操作符（类C）</h2><h2 id="位操作符（类C）"><a href="#位操作符（类C）" class="headerlink" title="位操作符（类C）"></a>位操作符（类C）</h2><h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><p>有C中的三目算符<code>condition ? expr1 : expr2</code>。同时还有个双目的<code>expr1 ?? expr2</code>，表示expr1不为null则返回expr1，否则返回expr2（可以理解为是有默认值的取值）。</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">String <span class="token function">playerName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> name <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'Guest'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="级联注解（级联操作符-）"><a href="#级联注解（级联操作符-）" class="headerlink" title="级联注解（级联操作符..）"></a>级联注解（级联操作符..）</h2><p>级联操作符（<code>..</code>）允许制造在同一个对象上的操作序列，通常可以节省创建临时变量的步骤。</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#confirm'</span><span class="token punctuation">)</span> <span class="token comment">// 取得对象</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Confirm'</span> <span class="token comment">// 使用成员</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'important'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Confirmed!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面这段等同于下面这段：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> button <span class="token operator">=</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#confirm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
button<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Confirm'</span><span class="token punctuation">;</span>
button<span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'important'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
button<span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Confirmed!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="其他操作符"><a href="#其他操作符" class="headerlink" title="其他操作符"></a>其他操作符</h2><table>
<thead>
<tr>
<th>操作符</th>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>()</code></td>
<td>函数调用</td>
<td>代表函数调用</td>
</tr>
<tr>
<td><code>[]</code></td>
<td>列表访问</td>
<td>取得列表中指定索引处的值</td>
</tr>
<tr>
<td><code>.</code></td>
<td>成员访问</td>
<td>取得表达式的一个属性</td>
</tr>
<tr>
<td><code>?.</code></td>
<td>条件成员访问</td>
<td>类似成员访问，但先判断表达式是否null，如null则返回null</td>
</tr>
</tbody></table>
<h1 id="控制流语句"><a href="#控制流语句" class="headerlink" title="控制流语句"></a>控制流语句</h1><h2 id="if-和-else"><a href="#if-和-else" class="headerlink" title="if 和 else"></a>if 和 else</h2><p>没什么特别的，需要注意条件必须是布尔型值即可。</p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>下面是一个示例，for中的闭包会捕捉索引的值（而非JS一样只传递变量引用），输出值为0和1：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  callbacks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要迭代访问的对象是可迭代的，可以使用<code>forEach()</code>方法（如果不关心当前迭代计数的话）：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">candidates<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> candidate<span class="token punctuation">.</span><span class="token function">interview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可迭代类如List和Set也支持<code>for-in</code>形式进行迭代：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> collection <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">in</span> collection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="while-和-do-while"><a href="#while-和-do-while" class="headerlink" title="while 和 do-while"></a>while 和 do-while</h2><p>没什么特别的。</p>
<h2 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h2><p>没什么特别的。</p>
<h2 id="switch-和-case"><a href="#switch-和-case" class="headerlink" title="switch 和 case"></a>switch 和 case</h2><p>没什么特别的。当一个case结束希望继续执行别的case，可在别的case前一行加<code>label:</code>，然后使用<code>continue label;</code></p>
<h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><p>在开发中，使用<code>assert(condition, optionalMessage);</code>来在条件为false时中断执行。<br>assert是否生效，取决于工具和框架设置：   </p>
<ul>
<li>Flutter在debug模式使能</li>
<li>仅开发工具如dartdevc一般默认使能</li>
<li>一些工具，如dart、dart2js，通过命令行标志<code>--enable-assert</code>使能   </li>
</ul>
<p>在生产代码中assert被忽略。</p>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>Dart代码可以抛出捕获异常。若异常未被捕获，则产生异常的隔离（isolate）被挂起，一般隔离和它的程序被终止。<br>相比Java，Dart所有的异常都是不受控异常，方法不声明它们可能抛出的异常，你也不被要求捕获任何异常。<br>Dart提供<code>Exception</code>和<code>Error</code>类型及很多预定义子类型。你也可以定义自己的异常。Dart可以将任何非null对象（而非仅Exception和Error）作为异常抛出。</p>
<h2 id="抛出（throw）"><a href="#抛出（throw）" class="headerlink" title="抛出（throw）"></a>抛出（throw）</h2><p>没什么特别的。</p>
<h2 id="捕获（catch）"><a href="#捕获（catch）" class="headerlink" title="捕获（catch）"></a>捕获（catch）</h2><p>一般有<code>try-on</code>、<code>try-catch</code>两种方式，当需要指定特定类型异常时使用<code>on</code>，在需要得到异常对象时使用<code>catch</code>。<code>catch</code>可以被指定一个或两个参数，第一个是被抛出的异常对象，第二个是栈轨迹（<code>StackTrace</code>对象）。</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  <span class="token function">breedMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">on</span> OutOfLlamasException <span class="token punctuation">&#123;</span>
  <span class="token function">buyMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  <span class="token function">breedMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">on</span> OutOfLlamasException <span class="token punctuation">&#123;</span>
  <span class="token comment">// 指定的异常</span>
  <span class="token function">buyMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">on</span> Exception <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 任何其他的Exception类型异常</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Unknown exception: $e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 不指定，处理所有异常</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Something really unknown: $e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Stack trace:\n $s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当部分处理异常，令异常传送，可以使用<code>rethrow</code>关键字,即让调用者看到这个异常：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">misbehave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">dynamic</span> foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>foo<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此处运行时错误</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'misbehave() partially handled $&#123;e.runtimeType&#125;.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">rethrow</span><span class="token punctuation">;</span> <span class="token comment">// 允许调用者看到这个异常</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>为确保一些代码在无论异常是否抛出时都被执行，使用<code>finally</code>。如果没catch语句符合异常，异常在finally执行后传送。</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="使用类成员"><a href="#使用类成员" class="headerlink" title="使用类成员"></a>使用类成员</h2><p>前文操作符处介绍过的<code>.</code>和<code>?.</code>即可</p>
<h2 id="使用构造器"><a href="#使用构造器" class="headerlink" title="使用构造器"></a>使用构造器</h2><p>可使用构造器创建对象，构造器名字可以是<code>类名</code>或<code>类名.标识符</code>如：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point<span class="token punctuation">.</span>fromJson</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其中<code>new</code>是可选的（自Dart2始）。<br>一些类提供常量构造器，使用<code>const</code>关键字来创建运行时常量：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 它们是相同的实例！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在常量上下文中，可以忽略构造器前的<code>const</code>，例如上面<code>var</code>替成<code>const</code>则后面构造器前的<code>const</code>可以省略。（自Dart2始）</p>
<h2 id="取得对象类型"><a href="#取得对象类型" class="headerlink" title="取得对象类型"></a>取得对象类型</h2><p>可使用对象的<code>runtimeType</code>属性（返回<code>Type</code>对象）来在运行时得到对象的类型。</p>
<h2 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h2><p>没有什么特别的。</p>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>通过创建与类同名函数声明构造器（也可选择加上附加的标识，类似前文使用构造器所述的<code>类名.标识符</code>）。其中，同样可用<code>this</code>关键字表示当前的实例（一般只在有命名冲突时使用，否则省略this）。<br>将构造器参数传给实例变量很普遍，Dart就有了如下语法糖：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

  <span class="token comment">// 语法糖，在构造器体运行前设置x、y值</span>
  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="默认构造器"><a href="#默认构造器" class="headerlink" title="默认构造器"></a>默认构造器</h3><p>未声明构造器，则提供默认构造器，该构造器无参数并调用父类中无参数构造器。</p>
<h3 id="构造器非继承"><a href="#构造器非继承" class="headerlink" title="构造器非继承"></a>构造器非继承</h3><p>子类不从父类继承构造器。</p>
<h3 id="命名构造器"><a href="#命名构造器" class="headerlink" title="命名构造器"></a>命名构造器</h3><p>如<a href="##%E4%BD%BF%E7%94%A8%E6%9E%84%E9%80%A0%E5%99%A8">使用构造器</a>中的添加标识符的构造器：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Point<span class="token punctuation">.</span><span class="token function">origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="调用非默认父类构造器"><a href="#调用非默认父类构造器" class="headerlink" title="调用非默认父类构造器"></a>调用非默认父类构造器</h3><p>默认的，子类构造器在构造器体开始处调用父类无命名、无参数构造器。如果初始化列表被使用则在调用父类的前执行。总结如下：</p>
<ol>
<li>初始化列表</li>
<li>父类无参构造器</li>
<li>主类无参构造器   </li>
</ol>
<p>若父类没有无命名、无参构造器，则你必须手动调用父类中的一个构造器，在构造器体（如果有的话）前用冒号（:）指定：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  String firstName<span class="token punctuation">;</span>
  Person<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>Map data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'in Person'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Person 无默认构造器，你必须调用 super.fromJson(data).</span>
  Employee<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>Map data<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'in Employee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note warning"><p>给到父类构造器的参数无法访问<code>this</code>。例如，参数可以调用静态方法但不能调用实例方法。</p>
</div>
<h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><p>除调用父类构造器之外，还可以在构造器体之前初始化实例变量，其间用逗号分隔：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">Point<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> num<span class="token operator">></span> json<span class="token punctuation">)</span>
    <span class="token punctuation">:</span> x <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      y <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'In Point.fromJson(): ($x, $y)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note warning"><p>初始化左端不能访问到<code>this</code>。</p>
</div>
<p>另外，在开发中也可以在初始化列表当中使用<code>assert</code>验证输入值。</p>
<h3 id="重定向构造器"><a href="#重定向构造器" class="headerlink" title="重定向构造器"></a>重定向构造器</h3><p>有时一个构造器只要重定向到同类中另一个构造器，其无构造器体，在冒号后调用重定向到的构造器：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Point<span class="token punctuation">.</span><span class="token function">alongXAxis</span><span class="token punctuation">(</span>num x<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="常量构造器"><a href="#常量构造器" class="headerlink" title="常量构造器"></a>常量构造器</h3><p>若类产生对象从不改变，可以使这些对象为编译时常量。定义<code>const</code>构造器并确保所有实例变量为<code>final</code>：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ImmutablePoint</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> ImmutablePoint origin <span class="token operator">=</span>
      <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>常量构造器并不总是创造常量。</p>
<h3 id="工厂构造器"><a href="#工厂构造器" class="headerlink" title="工厂构造器"></a>工厂构造器</h3><p>使用<code>factory</code>关键字，以实现一个构造器不总是创建它的类的新实例，如一个工厂构造器可能返回缓存中的实例或者子类型的一个实例：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> String name<span class="token punctuation">;</span>
  bool mute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token comment">// 注意 _cache 是私有库（因为_开头）</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Logger<span class="token operator">></span> _cache <span class="token operator">=</span>
      <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Logger<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">factory</span> <span class="token function">Logger</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> _cache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>
        name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Logger<span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  Logger<span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mute<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info"><p>工厂构造器不能访问<code>this</code></p>
</div>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>实例方法可以访问实例变量和<code>this</code>。</p>
<h3 id="getter-和-setter"><a href="#getter-和-setter" class="headerlink" title="getter 和 setter"></a>getter 和 setter</h3><p>getter和setter是读写对象属性的特殊方法，每个实例变量都有隐式的getter，以及合适的话还有个setter。你可以实现getter、setter来创建额外的属性，使用<code>get</code>和<code>set</code>关键字：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>
  num left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span>

  <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 定义两个计算属性: right and bottom.</span>
  num <span class="token keyword">get</span> right <span class="token operator">=</span><span class="token operator">></span> left <span class="token operator">+</span> width<span class="token punctuation">;</span>
  <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> left <span class="token operator">=</span> value <span class="token operator">-</span> width<span class="token punctuation">;</span>
  num <span class="token keyword">get</span> bottom <span class="token operator">=</span><span class="token operator">></span> top <span class="token operator">+</span> height<span class="token punctuation">;</span>
  <span class="token keyword">set</span> <span class="token function">bottom</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> top <span class="token operator">=</span> value <span class="token operator">-</span> height<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> rect <span class="token operator">=</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  rect<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info"><p>如自增（++）这样的操作符无论是否getter被明确定义都按照期待方式运作。为避免任何未期待的影响，操作符调用getter后将值存在一个临时变量中。</p>
</div>
<h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>抽象方法只能在抽象类中，用分号（;）代替方法体即创造了个抽象方法：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Doer</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义抽象方法</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">EffectiveDoer</span> <span class="token keyword">extends</span> <span class="token class-name">Doer</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>参见<a href="###%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95">抽象方法</a>，抽象类不能实例化。若想抽象类可实例化，可定义<a href="###%E5%B7%A5%E5%8E%82%E6%9E%84%E9%80%A0%E5%99%A8">工厂构造器</a>。</p>
<h2 id="隐式接口"><a href="#隐式接口" class="headerlink" title="隐式接口"></a>隐式接口</h2><p>每个类隐含定义一个接口包含类的所有实例成员及它实现的任何接口。如果你想创建类A支持B的API而不继承B的实现，类A应当实现B的接口。</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 接口，但仅库中可见</span>
  <span class="token keyword">final</span> _name<span class="token punctuation">;</span>
  <span class="token comment">// 构造器，非接口</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 接口</span>
  String <span class="token function">greet</span><span class="token punctuation">(</span>String who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Hello, $who. I am $_name.'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Person接口的的一个实现</span>
<span class="token keyword">class</span> <span class="token class-name">Impostor</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">get</span> _name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">;</span>
  String <span class="token function">greet</span><span class="token punctuation">(</span>String who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Hi $who. Do you know who I am?'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

String <span class="token function">greetBob</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> person<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'Kathy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token function">Impostor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是指定类实现多个接口的例子：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">,</span> Location <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h2><p>使用<code>extends</code>创建子类，并用<code>super</code>来引用父类。</p>
<h3 id="重写（overriding）成员"><a href="#重写（overriding）成员" class="headerlink" title="重写（overriding）成员"></a>重写（overriding）成员</h3><p>子类可以重写实例方法、getter、setter。可用<code>@override</code>注解指明要重写的成员：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">SmartTelevision</span> <span class="token keyword">extends</span> <span class="token class-name">Television</span> <span class="token punctuation">&#123;</span>
  <span class="token metadata symbol">@override</span>
  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>
  <span class="token comment">// ···</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码中收窄方法参数或实例变量的类型是类型安全的，你可以使用<code>convariant</code>关键词在子类型前来表明此处应用子类型的意图。</p>
<h3 id="可重写操作符"><a href="#可重写操作符" class="headerlink" title="可重写操作符"></a>可重写操作符</h3><p>下面是个重写操作符的例子：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Vector</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> int x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

  <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

  Vector <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span>Vector v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Vector</span><span class="token punctuation">(</span>x <span class="token operator">+</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Vector <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span>Vector v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Vector</span><span class="token punctuation">(</span>x <span class="token operator">-</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 操作符==与hashCode代码未列出，见随后的说明</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> v <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> w <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">assert</span><span class="token punctuation">(</span>v <span class="token operator">+</span> w <span class="token operator">==</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>v <span class="token operator">-</span> w <span class="token operator">==</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要重写==，就也需要重写对象的<code>hashCode</code>的getter。类似下面：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> String firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">;</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 重写hashCode</span>
  <span class="token metadata symbol">@override</span>
  int <span class="token keyword">get</span> hashCode <span class="token punctuation">&#123;</span>
    int result <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">37</span> <span class="token operator">*</span> result <span class="token operator">+</span> firstName<span class="token punctuation">.</span>hashCode<span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">37</span> <span class="token operator">*</span> result <span class="token operator">+</span> lastName<span class="token punctuation">.</span>hashCode<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 重写hashCode后通常应重写==</span>
  <span class="token metadata symbol">@override</span>
  bool <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>other <span class="token operator">is!</span> Person<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    Person person <span class="token operator">=</span> other<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>person<span class="token punctuation">.</span>firstName <span class="token operator">==</span> firstName <span class="token operator">&amp;&amp;</span>
        person<span class="token punctuation">.</span>lastName <span class="token operator">==</span> lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Smith'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Smith'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token string">'not a person'</span><span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>hashCode <span class="token operator">==</span> p2<span class="token punctuation">.</span>hashCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="noSuchMethod"><a href="#noSuchMethod" class="headerlink" title="noSuchMethod()"></a>noSuchMethod()</h3><p>可重写<code>noSuchMethod()</code>方法来在使用不存在方法或实例变量时做出反应：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 除非重写noSuchMethod，否则使用不存在成员产生个NoSuchMethodError</span>
  <span class="token metadata symbol">@override</span>
  <span class="token keyword">void</span> <span class="token function">noSuchMethod</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'You tried to use a non-existent member: '</span> <span class="token operator">+</span>
        <span class="token string">'$&#123;invocation.memberName&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><mark>除非下列情形，否则不可调用未实现的方法：</p>
<ul>
<li>接收者有静态类型<code>dynamic</code></li>
<li>接收者有静态类型定义了这个未实现方法（可以是抽象的），且接收者的动态类型有实现<code>noSuchMethod()</code>不同于<code>Object</code>类</mark></li>
</ul>
<h1 id="To-Be-Continued"><a href="#To-Be-Continued" class="headerlink" title="To Be Continued..."></a><code>To Be Continued...</code></h1>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Dart</tag>
        <tag>编程</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年4月 关西之行</title>
    <url>/2019/08/01/2019%E5%B9%B44%E6%9C%88%20%E5%85%B3%E8%A5%BF%E4%B9%8B%E8%A1%8C/</url>
    <content><![CDATA[<p><img data-src="https://pic.gps949.com/1904KANSAI/K1904815.jpg"></p>
<span id="more"></span>
<p><img data-src="https://pic.gps949.com/1904KANSAI/K1904152.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904167.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904170.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904172.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904180.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904185.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904196.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904199.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904210.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904216.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904221.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904235.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904239.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904256.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904260.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904262.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904267.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904268.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904276.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904278.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904281.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904283.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904288.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904294.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904303.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904315.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904336.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904343.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904347.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904350.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904352.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904356.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904359.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904373.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904375.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904382.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904383.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904386.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904390.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904395.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904402.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904406.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904409.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904417.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904419.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904432.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904433.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904437.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904444.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904468.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904482.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904489.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904491.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904504.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904508.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904515.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904525.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904529.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904533.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904535.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904537.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904541.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904542.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904548.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904550.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904557.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904560.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904563.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904565.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904567.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904569.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904571.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904575.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904579.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904580.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904584.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904587.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904588.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904591.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904594.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904617.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904619.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904620.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904630.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904631.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904632.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904645.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904650.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904654.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904660.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904664.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904672.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904675.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904679.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904686.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904688.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904693.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904698.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904700.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904702.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904713.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904717.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904721.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904743.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904745.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904747.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904752.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904773.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904774.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904778.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904790.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904794.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904815.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904822.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904836.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904839.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904843.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904844.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904846.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904850.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904859.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904863.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904870.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904876.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904877.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904879.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904884.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904887.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904890.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904895.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904899.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904900.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904905.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904909.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904912.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904917.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904920.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904923.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904930.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904931.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904933.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904934.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904937.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904941.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904943.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904944.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904947.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904950.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904953.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904963.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904967.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904973.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904977.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904979.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904980.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904983.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904986.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904988.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904989.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904992.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904996.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1904998.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905002.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905012.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905016.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905027.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905030.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905037.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905038.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905059.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905071.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905075.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905080.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905096.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905110.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905116.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905125.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905126.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905128.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905132.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905134.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905136.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905142.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905145.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905150.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905157.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905163.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905167.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905173.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905182.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905183.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905192.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905195.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905197.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905199.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905207.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905212.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905213.jpg"><br><img data-src="https://pic.gps949.com/1904KANSAI/K1905218.jpg"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>摄影</tag>
        <tag>生活</tag>
        <tag>日本</tag>
        <tag>关西</tag>
        <tag>A7R2</tag>
        <tag>游记</tag>
        <tag>樱花</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter学习笔记（二）布局</title>
    <url>/2019/04/27/Flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>上一篇是对于Flutter当中Widget概念的简要介绍，从而对于无状态及有状态的小部件有一定的认识，并对于它们在实际中的使用进行了了解，包括状态的设置、用户交互的响应等。那么，我们知道要是构建一个应用，在让功能实现前先需要将小部件们合理的组织在一起。在Flutter中，可见的元素以小部件的形式存在，而小部件的位置布局关系等也是以小部件形式存在的。</p>
<span id="more"></span>
<div class="note default"><p><strong>要点提示</strong></p>
<ul>
<li>小部件是用来构建UI的类</li>
<li>小部件同时用在布局和UI元素</li>
<li>组合简单的小部件以构建复杂的小部件</li>
</ul>
</div>
<p>Flutter布局的核心机制是小部件。在Flutter中几乎所有事物都是个小部件，甚至布局模式也是。你在应用中看到的图片、图标、文字都是小部件。但你看不到的一些也是小部件，例如用以排布、约束、对齐小部件的行、列和网格。<br>你通过将小部件组合成更复杂的小部件来创建一个布局。例如，下面第一个的截图展示了下方带标签的三个图标：<br>    <table><tr><td><img data-src="/images/layout_in_flutter/1-1.png" alt="小部件组"></td><td><img data-src="/images/layout_in_flutter/1-2.png" alt="小部件组layout"></td></tr></table></p>
<p>第二个截图是可视化布局，展示了一行3列每列包含一个图标和一个标签。</p>
<div class="note info"><p><strong>注意</strong><br>笔记中的截图都是设置<code>debugPaintSizeEnabled</code>为true以看到可视化布局的。<br>更多信息参见<a href="https://flutter.dev/docs/testing/debugging#visual-debugging">可视化调试</a>.</p>
</div>
<p>下面是这个UI的小部件树的示意图：<br><img data-src="/images/layout_in_flutter/2.png" alt="小部件树"><br>其中大部分你可能已经猜到，但是可能会对containers(粉色节点)好奇。<code>Container</code>是允许你自定义其子小部件的小部件类。当你希望添加padding、margin、边框、背景色等时，可以使用<code>Container</code>设置其属性。<br>这个例子中，每个<code>Text</code>小部件都放在一个<code>Container</code>中来增添margin。整个<code>Row</code>小部件也放在<code>Container</code>中在一行的周围增加padding。<br>例子中UI其余部分用属性控制。通过<code>color</code>属性设置<code>Icon</code>的颜色，通过<code>Text.style</code>设置字体（如颜色、粗细等）。行和列有属性来设置它的子元素在横向纵向上如何对齐以及占用多少空间。</p>
<h1 id="布局一个小部件"><a href="#布局一个小部件" class="headerlink" title="布局一个小部件"></a>布局一个小部件</h1><p>如何在Flutter中布局单独一个小部件？这小节展示你如何创建展示一个简单的小部件，以及一个简单的Hello World应用的完整代码。<br>Flutter中，只需几步在屏幕上放置文字、图标和图像：</p>
<h2 id="1-选择一个布局小部件"><a href="#1-选择一个布局小部件" class="headerlink" title="1.选择一个布局小部件"></a>1.选择一个布局小部件</h2><p>根据你想要如何对齐与约束可见小部件来在各种<a href="https://flutter.dev/docs/development/ui/widgets/layout">布局小部件</a>中选择一个。这个例子中使用<code>Center</code>来将其内容在横纵向上置于居中。</p>
<h2 id="2-创建一个可见小部件"><a href="#2-创建一个可见小部件" class="headerlink" title="2.创建一个可见小部件"></a>2.创建一个可见小部件</h2><p>例如，创建一个<code>Text</code>小部件：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>创建一个<code>Image</code>小部件：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>
  <span class="token string">'images/lake.jpg'</span><span class="token punctuation">,</span>
  fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>cover<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建一个<code>Icon</code>小部件：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">Icon</span><span class="token punctuation">(</span>
  Icons<span class="token punctuation">.</span>star<span class="token punctuation">,</span>
  color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>red<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-添加可见小部件到布局小部件"><a href="#3-添加可见小部件到布局小部件" class="headerlink" title="3.添加可见小部件到布局小部件"></a>3.添加可见小部件到布局小部件</h2><p>任一个布局小部件都有下面两者之一：</p>
<ul>
<li><code>child</code>属性：即只接收一个子小部件——例如<code>Center</code>、<code>Container</code>；</li>
<li><code>children</code>属性：即可接收一个小部件列表——例如<code>Row</code>、<code>Column</code>、<code>ListView</code>、<code>Stack</code>  </li>
</ul>
<p>将<code>Text</code>小部件添加到<code>Center</code>小部件：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">Center</span><span class="token punctuation">(</span>
  child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="4-将布局小部件添加到页"><a href="#4-将布局小部件添加到页" class="headerlink" title="4.将布局小部件添加到页"></a>4.将布局小部件添加到页</h2><p>Flutter应用是自身的一个小部件，而大部分小部件都有<code>build()</code>方法，在app的<code>build()</code>方法中实例化并返回一个小部件来显示它。</p>
<h3 id="Material-apps"><a href="#Material-apps" class="headerlink" title="Material apps"></a>Material apps</h3><p>对于Material应用你可以使用<code>Scaffold</code>小部件，它提供了默认横幅、背景颜色且有添加drawer、snack bar和bottom sheet的接口<code>（这里没找到很合适的词翻译）</code>。然后你可以直接将<code>Center</code>小部件添加到主页的<code>body</code>属性。</p>
<pre class="line-numbers language-dart" data-language="dart"><div class="caption"><span><font color=black><strong>lib/main.dart (MyApp)</strong></font></span></div><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token metadata symbol">@override</span>
  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> MaterialAp     appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>
          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Flutter layout demo'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>
          child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info"><p><strong>注意</strong><br><a href="https://api.flutter.dev/flutter/material/material-library.html">Material库</a>遵循Material Design原则实现小部件。设计UI时你可以仅仅使用<a href="https://api.flutter.dev/flutter/widgets/widgets-library.html">标准小部件库</a>中的小部件，也可以使用Material库中的。你可以混合两个库中的小部件、定制已有小部件或者可以创建你自己的定制化小部件集。</p>
</div>
<h3 id="非Material-apps"><a href="#非Material-apps" class="headerlink" title="非Material apps"></a>非Material apps</h3><p>对于非Material应用，可以将<code>Center</code>小部件添加到app的<code>build()</code>方法：</p>
<pre class="line-numbers language-dart" data-language="dart"><div class="caption"><span><font color=black><strong>lib/main.dart (MyApp)</strong></font></span></div><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token metadata symbol">@override</span>
  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">Container</span><span class="token punctuation">(</span>ld<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>
        child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>
          <span class="token string">'Hello World'</span><span class="token punctuation">,</span>
          textDirection<span class="token punctuation">:</span> TextDirection<span class="token punctuation">.</span>ltr<span class="token punctuation">,</span>
          style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>
            fontSize<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>
            color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>black87<span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>默认的非Material应用不带有<code>AappBar</code>、标题栏和背景色，如果你希望在非Material应用中使用这些特性你可以自己去创建。这个应用修改背景色到白色、文字到深灰来模仿Material应用。<br>当你运行应用，你会看到如图的Hello World：<br><img data-src="/images/layout_in_flutter/3.png" alt="Hello World App"><br>应用的源码：</p>
<ul>
<li><a href="https://github.com/flutter/website/tree/master/examples/layout/base">Material app</a></li>
<li><a href="https://github.com/flutter/website/tree/master/examples/layout/non_material">Non-Material app</a></li>
</ul>
<h1 id="纵向横向上布局多个小部件"><a href="#纵向横向上布局多个小部件" class="headerlink" title="纵向横向上布局多个小部件"></a>纵向横向上布局多个小部件</h1><p>一种常用的布局模式是将小部件纵向或横向排列，你可以用<code>Row</code>小部件横向组织小部件而用<code>Column</code>小部件纵向组织小部件。</p>
<div class="note default"><p><strong>要点提示</strong></p>
<ul>
<li>Row和Column是最常用的两个布局模式</li>
<li>Row和Column都是接收一个子小部件列表</li>
<li>子小部件可以是Row、Column或其他复杂小部件</li>
<li>你可以指定Row或Column如何对齐其子小部件</li>
<li>你可以拉伸或压缩指定的子小部件</li>
<li>你可以指定子小部件如何使用Row和Column的可用空间</li>
</ul>
</div>
<p>通过向<code>Row</code>或<code>Column</code>小部件添加子小部件列表在Flutter中创建行列。反过来单个小部件可以独自成一行或一列。下面的例子展示了如何在行列中组织行列。<br>这个布局组织成Row，这行包含两个子小部件：左侧的一列和右侧的图片。<br><img data-src="/images/layout_in_flutter/4.png" alt="行布局"><br>左侧列的小部件树包含行和列：<br><img data-src="/images/layout_in_flutter/5.png" alt="列布局"><br>你可以通过<a href="#%E8%A1%8C%E5%88%97%E4%BA%A4%E7%BB%87">行列交织</a>实现部分Pavlova的代码。</p>
<div class="note info"><p><strong>注意</strong><br><code>Row</code>和<code>Column</code>是水平与竖直布局的最基本小部件——这些低级小部件允许最大程度的定制化。Flutter也提供专门的更高级的小部件以满足你的需要。例如，你可能会用<code>ListTile</code>来替代<code>Row</code>，它提供有首尾图标和最多3行文字的属性。你可能会用<code>ListView</code>来替代<code>Column</code>，它类似Column但当其内容对于空间过大时自动滚动。更多信息参考<a href="#%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80%E5%B0%8F%E9%83%A8%E4%BB%B6">常用布局小部件</a>。</p>
</div>
<h1 id="小部件的对齐"><a href="#小部件的对齐" class="headerlink" title="小部件的对齐"></a>小部件的对齐</h1><p>你可以使用<code>mainAxisAlignment</code>和<code>crossAxisAlignment</code>属性来设置行列如何对齐小部件。对行来说，主轴为水平向，交叉轴为竖直向，对列来说正好相反。<br>    <table><tr><td><img data-src="/images/layout_in_flutter/6-1.png" alt="主轴与交叉轴-Row"></td><td><img data-src="/images/layout_in_flutter/6-2.png" alt="主轴与交叉轴-Column"></td></tr></table></p>
<div class="note info"><p><strong>注意</strong><br>当你往工程中添加图片时，需要更新<code>pubspec</code>文件以能访问到它——本例中用<code>Image.asset</code>来展示图片。更多信息参考<a href="https://github.com/flutter/website/tree/master/examples/layout/row/pubspec.yaml">样例pubspec.yaml文件</a>或是<a href="https://flutter.dev/docs/development/ui/assets-and-images">Flutter中添加资产和图片</a>。你如果使用<code>Image.network</code>获取网络上图片则不需做此操作。</p>
</div>
<p>在接下来的这个例子中，三个图片都是100像素宽，绘制空间(render box)（在本例中为整个屏幕）比300像素要宽，所以将主轴对齐设置为<code>spaceEvenly</code>来将水平的可用空间在图片前后和之间留空进行划分。</p>
<div class="tabs" id="图片水平排列"><ul class="nav-tabs"><li class="tab"><a href="#图片水平排列-1">代码</a></li><li class="tab active"><a href="#图片水平排列-2">效果及源码</a></li></ul><div class="tab-content"><div class="tab-pane" id="图片水平排列-1"><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">Row</span><span class="token punctuation">(</span>
  mainAxisAlignment<span class="token punctuation">:</span> MainAxisAlignment<span class="token punctuation">.</span>spaceEvenly<span class="token punctuation">,</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>‘images<span class="token operator">/</span>pic1<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">,</span>
    Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>‘images<span class="token operator">/</span>pic2<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">,</span>
    Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>‘images<span class="token operator">/</span>pic3<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-pane active" id="图片水平排列-2"><p><img data-src="/images/layout_in_flutter/7-1.png" alt="图片水平排列"><br><strong>源码：</strong><a href="https://github.com/flutter/website/tree/master/examples/layout/row_column">row_column</a></p></div></div></div>
<p>列和行是类似的，下面例子中展示了一列高度都是100像素的3个图像。绘制空间(render box)（在本例中为整个屏幕）比300像素要高，所以将主轴对齐设置为<code>spaceEvenly</code>来将竖直的可用空间在图片前后和之间留空进行划分。</p>
<div class="tabs" id="图片竖直排列"><ul class="nav-tabs"><li class="tab"><a href="#图片竖直排列-1">代码</a></li><li class="tab active"><a href="#图片竖直排列-2">效果及源码</a></li></ul><div class="tab-content"><div class="tab-pane" id="图片竖直排列-1"><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">Column</span><span class="token punctuation">(</span>
  mainAxisAlignment<span class="token punctuation">:</span> MainAxisAlignment<span class="token punctuation">.</span>spaceEvenly<span class="token punctuation">,</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>‘images<span class="token operator">/</span>pic1<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">,</span>
    Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>‘images<span class="token operator">/</span>pic2<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">,</span>
    Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>‘images<span class="token operator">/</span>pic3<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-pane active" id="图片竖直排列-2"><p><img data-src="/images/layout_in_flutter/7-2.png" alt="图片竖直排列"><br><strong>源码：</strong><a href="https://github.com/flutter/website/tree/master/examples/layout/row_column">row_column</a></p></div></div></div>
<h1 id="调整小部件尺寸"><a href="#调整小部件尺寸" class="headerlink" title="调整小部件尺寸"></a>调整小部件尺寸</h1><p>当布局对于设备来说太大了，黑黄条纹相间条带会出现在受影响的边缘。这是一个行太宽的<a href="https://github.com/flutter/website/tree/master/examples/layout/sizing">例子</a>：<br><img data-src="/images/layout_in_flutter/8.png" alt="行太宽"><br>小部件可以通过<code>Expanded</code>小部件来调整尺寸以适应行或列。将每个图片用<code>Expanded</code>小部件包围来修复前面的一行图片对于渲染空间太宽的问题：</p>
<div class="tabs" id="图片尺寸过大"><ul class="nav-tabs"><li class="tab"><a href="#图片尺寸过大-1">代码</a></li><li class="tab active"><a href="#图片尺寸过大-2">效果及源码</a></li></ul><div class="tab-content"><div class="tab-pane" id="图片尺寸过大-1"><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">Row</span><span class="token punctuation">(</span>
  crossAxisAlignment<span class="token punctuation">:</span> CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token function">Expanded</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>‘images<span class="token operator">/</span>pic1<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Expanded</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>‘images<span class="token operator">/</span>pic2<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Expanded</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>‘images<span class="token operator">/</span>pic3<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-pane active" id="图片尺寸过大-2"><p><img data-src="/images/layout_in_flutter/9-1.png" alt="图片尺寸过大调整"><br><strong>源码：</strong><a href="https://github.com/flutter/websitelesles/layout/sizing">sizing</a></p></div></div></div>
<p>或许你或许你许你或许你你许你或或你或你你许你或或或许你希望令一个小部件拥有其兄弟的2倍大小，则使用<code>Expanded</code>小部件的<code>flex</code>属性来指定其缩放因子。该参数默认为1，下面代码设置中间图片的缩放因子为2：</p>
<div class="tabs" id="图片大小缩放"><ul class="nav-tabs"><li class="tab"><a href="#图片大小缩放-1">代码</a></li><li class="tab active"><a href="#图片大小缩放-2">效果及源码</a></li></ul><div class="tab-content"><div class="tab-pane" id="图片大小缩放-1"><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">Row</span><span class="token punctuation">(</span>
  crossAxisAlignment<span class="token punctuation">:</span> CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token function">Expanded</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>‘images<span class="token operator">/</span>pic1<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Expanded</span><span class="token punctuation">(</span>
      flex<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>‘images<span class="token operator">/</span>pic2<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Expanded</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>‘images<span class="token operator">/</span>pic3<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-pane active" id="图片大小缩放-2"><p><img data-src="/images/layout_in_flutter/9-2.png" alt="图片大小缩放"><br><strong>源码：</strong><a href="https://github.com/flutter/website/tree/master/examples/laayout/sizing">szing</a></p></div></div></div>
<h1 id="压紧（Packing）小部件"><a href="#压紧（Packing）小部件" class="headerlink" title="压紧（Packing）小部件"></a>压紧（Packing）小部件</h1><p>默认行或列小部件会沿着主轴方向占满空间，但如果你希望将子小部件们压紧在一起，可以设置<code>mainAxisSize</code>为<code>MainAxisSize.min</code>。下面的例子即是使用该属性将星形图标压紧在一起。</p>
<div class="tabs" id="压紧小部件"><ul class="nav-tabs"><li class="tab"><a href="#压紧小部件-1">代码</a></li><li class="tab active"><a href="#压紧小部件-2">效果及源码</a></li></ul><div class="tab-content"><div class="tab-pane" id="压紧小部件-1"><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token function">Row</span><span class="token punctuation">(</span>
  mainAxisSize<span class="token punctuation">:</span> MainAxisSize<span class="token punctuation">.</span>min<span class="token punctuation">,</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>star<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>star<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>star<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>star<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>star<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-pane active" id="压紧小部件-2"><p><img data-src="/images/layout_in_flutter/10.png" alt="压紧小部件"><br><strong>源码：</strong><a href="https://github.com/flutter/website/tree/master/examples/layout/pavlova">pavlova</a></p></div></div></div>
<h1 id="行列交织"><a href="#行列交织" class="headerlink" title="行列交织"></a>行列交织</h1><p>布局框架允许你将行和列进行任意层次的嵌套。让我们看一下下面布局中框出来部分的代码：<br><img data-src="/images/layout_in_flutter/11.png" alt="行列交织"><br>框出部分由两行构成，评分行包含五个星星和评论数量，图标行包含三列图标和文字。<br>评分行的小部件树：<br><img data-src="/images/layout_in_flutter/12.png" alt="评分行小部件树"><br><code>ratings</code>变量创建了一个包含五颗星星的更小行和文字的一行：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> stars <span class="token operator">=</span> <span class="token function">Row</span><span class="token punctuation">(</span>
  mainAxisSize<span class="token punctuation">:</span> MainAxisSize<span class="token punctuation">.</span>min<span class="token punctuation">,</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>star<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>star<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>star<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>star<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>star<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token punctuation">&#123;</span><span class="token operator">%</span> label warning <span class="token metadata symbol">@ratings</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">Container</span><span class="token punctuation">(</span>
  padding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  child<span class="token punctuation">:</span> <span class="token function">Row</span><span class="token punctuation">(</span>
    mainAxisAlignment<span class="token punctuation">:</span> MainAxisAlignment<span class="token punctuation">.</span>spaceEvenly<span class="token punctuation">,</span>
    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      stars<span class="token punctuation">,</span>
      <span class="token function">Text</span><span class="token punctuation">(</span>
        <span class="token string">'170 Reviews'</span><span class="token punctuation">,</span>
        style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>
          color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>black<span class="token punctuation">,</span>
          fontWeight<span class="token punctuation">:</span> FontWeight<span class="token punctuation">.</span>w800<span class="token punctuation">,</span>
          fontFamily<span class="token punctuation">:</span> <span class="token string">'Roboto'</span><span class="token punctuation">,</span>
          letterSpacing<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>
          fontSize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note success"><p><strong>小贴士</strong><br>为了减少严重交织的布局代码的视觉困扰，将UI的小片实现在变量或函数中。</p>
</div>
<p>在评分行下方的图标行包含3列，每列均包含一个图标和两行文字，如下面小部件树中所见：<br><img data-src="/images/layout_in_flutter/13.png" alt="图标行小部件树"><br><code>iconList</code>变量定义了图标行：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">final</span> descTextStyle <span class="token operator">=</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>
  color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>black<span class="token punctuation">,</span>
  fontWeight<span class="token punctuation">:</span> FontWeight<span class="token punctuation">.</span>w800<span class="token punctuation">,</span>
  fontFamily<span class="token punctuation">:</span> <span class="token string">'Roboto'</span><span class="token punctuation">,</span>
  letterSpacing<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>
  fontSize<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  height<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// DefaultTextStyle.merge() 允许你创建一个默认的文本样式被其子孙继承</span>
<span class="token keyword">final</span> iconList <span class="token operator">=</span> DefaultTextStyle<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>
  style<span class="token punctuation">:</span> descTextStyle<span class="token punctuation">,</span>
  child<span class="token punctuation">:</span> <span class="token function">Container</span><span class="token punctuation">(</span>
    padding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    child<span class="token punctuation">:</span> <span class="token function">Row</span><span class="token punctuation">(</span>
      mainAxisAlignment<span class="token punctuation">:</span> MainAxisAlignment<span class="token punctuation">.</span>spaceEvenly<span class="token punctuation">,</span>
      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token function">Column</span><span class="token punctuation">(</span>
          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>kitchen<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'PREP:'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'25 min'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">Column</span><span class="token punctuation">(</span>
          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>timer<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'COOK:'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'1 hr'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">Column</span><span class="token punctuation">(</span>
          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>restaurant<span class="token punctuation">,</span> color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'FEEDS:'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'4-6'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>leftColumn</code>变量包含评分及图标行，同时包含描述Pavlova的标题和文字：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">final</span> leftColumn <span class="token operator">=</span> <span class="token function">Container</span><span class="token punctuation">(</span>
  padding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">fromLTRB</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  child<span class="token punctuation">:</span> <span class="token function">Column</span><span class="token punctuation">(</span>
    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      titleText<span class="token punctuation">,</span>
      subTitle<span class="token punctuation">,</span>
      ratings<span class="token punctuation">,</span>
      iconList<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>左侧的一列放在<code>Container</code>中以约束宽度，最终UI通过<code>Card</code>中整个一行（包含左侧的列和图片）构成。<br>Pavlova的图片来自<a href="https://pixabay.com/en/photos/pavlova">Pixabay</a>，你可以使用<code>Image.network()</code>将网络图片嵌入。但是，在本例中图片存在项目的图片目录中，加到了<code>pubspec</code>文件中，并用<code>Images.asset()</code>获取。更多信息参见<a href="https://flutter.dev/docs/development/ui/assets-and-images">添加资产和图片</a></p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>
  child<span class="token punctuation">:</span> <span class="token function">Container</span><span class="token punctuation">(</span>
    margin<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">fromLTRB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    height<span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">,</span>
    child<span class="token punctuation">:</span> <span class="token function">Card</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> <span class="token function">Row</span><span class="token punctuation">(</span>
        crossAxisAlignment<span class="token punctuation">:</span> CrossAxisAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token function">Container</span><span class="token punctuation">(</span>
            width<span class="token punctuation">:</span> <span class="token number">440</span><span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> leftColumn<span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          mainImage<span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note success"><p><strong>小贴士</strong><br>这个Pavlova例子在宽的设备上水平运行最好，比如平板。如果你在iOS模拟器上执行，可在<strong>Hardware &gt; Device</strong>菜单选择不同的设备，如我们推荐的iPad Pro。你可以通过<strong>Hardware &gt; Rotate</strong>改变它的方向到横屏。你也可以通过<strong>Window &gt; Scale</strong>改变模拟器窗口的大小（不改变逻辑分辨率）。</p>
</div>
<p>应用源码：<a href="https://github.com/flutter/website/tree/master/examples/layout/pavlova">pavlova</a></p>
<h1 id="常用布局小部件"><a href="#常用布局小部件" class="headerlink" title="常用布局小部件"></a>常用布局小部件</h1><p>Flutter有丰富布局小部件库。</p>
<p>未完待续。。。。。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>计算机</tag>
        <tag>Flutter</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter学习笔记（一）Widget介绍</title>
    <url>/2019/04/19/Flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89Widget%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>在昨天已经完成了在macOS上安装配置Flutter开发环境并真机调试成功第一个iOS App based on Flutter，也在Windows上搭建了Flutter环境。对这个开发方式感觉还是有点意思的，今天继续学一下Flutter的知识。<br>一开始根据官方教程建App时，就指出了在Flutter中一切都以Widget的形式存在的。Flutter的Widget是受React影响以现代框架进行创建的，它们描述自己在当前配置与状态下的样式。当状态改变时它就改变描述，框架根据与之前描述的差异以最小的变动展现状态变化带来的样式变化。</p>
<span id="more"></span>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>最小的一个Flutter App如下，仅单纯地调用一个<code>runApp()</code>（入口是<code>void main()</code>）：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">runApp</span><span class="token punctuation">(</span>
    <span class="token function">Center</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>
        <span class="token string">'Hello, world!'</span><span class="token punctuation">,</span>
        textDirection<span class="token punctuation">:</span> TextDirection<span class="token punctuation">.</span>ltr<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<code>runApp()</code>中，使用给出的widget作为整个widget tree的根。上面示例中widget tree包含两个widget，一个是<code>Center</code>一个是它的child成员<code>Text</code>。框架会强制使用widget tree的根覆盖屏幕，这样即意味着“Hello, world!”会在整个屏幕的正中央。<br>当写一个App时，通常建议写一个<code>StatelessWidget</code>或<code>StatefulWidget</code>的子类。Widget的主要任务是实现一个<code>build</code>函数来就更低级别的其他widget描述自己。框架逐个构建widget直到遇到由用来计算和描述widget几何形状的<a href="https://api.flutter.dev/flutter/rendering/RenderObject-class.html"><code>RenderObject</code></a>构建的widget。</p>
<h1 id="基本widget（小部件）"><a href="#基本widget（小部件）" class="headerlink" title="基本widget（小部件）"></a>基本widget（小部件）</h1><p>Flutter提供了强大的基础widget组，下面是常用的一些：</p>
<ul>
<li><strong>Text</strong>：Text小部件无需多言，可以在你的应用中创建一串指定样式的文字。</li>
<li><strong>Row</strong>,<strong>Column</strong>：这些伸缩小部件让你可以在应用中横向、纵向创建灵活布局。这一点的设计可参考WEB中的flexbox布局。</li>
<li><strong>Stack</strong>：相较于线性排列，Stack小部件让你可以将小部件们在绘制时相互堆叠。之后可以使用<code>Positioned</code>小部件作用于Stack小部件的子部件们，指定他们在Stack中相对于上下左右边缘的位置。这一点的设计可参考WEB中的绝对位置。</li>
<li><strong>Container</strong>：Container小部件可创建矩形区域，它可以被<code>BoxDecoration</code>修饰，如背景、边缘、阴影等。它的尺寸还可以被设定margins，padding，constraints。Containter小部件可以用矩阵转换到三维空间。<br>下面是演示了这些以及其他一些小组件：</li>
</ul>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyAppBar</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token function">MyAppBar</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Widget子类的成员永远被标记为final.</span>

  <span class="token keyword">final</span> Widget title<span class="token punctuation">;</span>

  <span class="token metadata symbol">@override</span>
  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">Container</span><span class="token punctuation">(</span>
      height<span class="token punctuation">:</span> <span class="token number">56.0</span><span class="token punctuation">,</span> <span class="token comment">// 单位为逻辑像素</span>
      padding<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      decoration<span class="token punctuation">:</span> <span class="token function">BoxDecoration</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blue<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// Row 为水平的线性布局.</span>
      child<span class="token punctuation">:</span> <span class="token function">Row</span><span class="token punctuation">(</span>
        <span class="token comment">// &lt;Widget> 为List中元素类型</span>
        children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>
          <span class="token function">IconButton</span><span class="token punctuation">(</span>
            icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">,</span>
            tooltip<span class="token punctuation">:</span> <span class="token string">'Navigation menu'</span><span class="token punctuation">,</span>
            onPressed<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 禁用按钮</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token comment">// Expanded 将它的child填满整个可用空间</span>
          <span class="token function">Expanded</span><span class="token punctuation">(</span>
            child<span class="token punctuation">:</span> title<span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token function">IconButton</span><span class="token punctuation">(</span>
            icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">,</span>
            tooltip<span class="token punctuation">:</span> <span class="token string">'Search'</span><span class="token punctuation">,</span>
            onPressed<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">MyScaffold</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token metadata symbol">@override</span>
  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Material 是显示UI的概念上的一张纸.</span>
    <span class="token keyword">return</span> <span class="token function">Material</span><span class="token punctuation">(</span>
      <span class="token comment">// Column 是垂直的线性布局.</span>
      child<span class="token punctuation">:</span> <span class="token function">Column</span><span class="token punctuation">(</span>
        children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>
          <span class="token function">MyAppBar</span><span class="token punctuation">(</span>
            title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>
              <span class="token string">'Example title'</span><span class="token punctuation">,</span>
              style<span class="token punctuation">:</span> Theme<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>primaryTextTheme<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token function">Expanded</span><span class="token punctuation">(</span>
            child<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>
              child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MaterialApp</span><span class="token punctuation">(</span>
    title<span class="token punctuation">:</span> <span class="token string">'My app'</span><span class="token punctuation">,</span> <span class="token comment">// 此标题被系统的任务管理器使用</span>
    home<span class="token punctuation">:</span> <span class="token function">MyScaffold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要确保在<code>pubspec.yaml</code>文件的<code>flutter</code>一节设有<code>uses-material-design: true</code>来让你有预设的图标集<a href="https://design.google.com/icons/">Material icons</a>可用。</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> my_app
<span class="token key atrule">flutter</span><span class="token punctuation">:</span>
  <span class="token key atrule">uses-material-design</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>许多小部件需要在<code>MaterialApp</code>内部以继承主题，因此我们带<code>MaterialApp</code>运行应用。<br>上面的代码中，<code>MyAppBar</code>创建了56设备无关像素高度的<code>Container</code>并在水平向（左右侧）各设置8像素的padding。在Containter的内部，使用<code>Row</code>布局组织子成员们。位于中间的<code>title</code>子成员被标记为<code>Expanded</code>从而令其填满其他子成员未占用的空间，使用多个Expanded时可用<a href="https://api.flutter.dev/flutter/widgets/Expanded-class.html#flex">flex</a>参数来设置各自占用的比例。<br><code>MyScaffold</code>小部件将其子成员以竖直方向一列组织，顶部放置MyAppBar实例，并传递给它一个<code>Text</code>小部件作为title。传递参数给widget是一个令你能以多种方式复用它的一个有力技术。最终MyScaffold使用Expanded以一个居中的消息填满其剩余空间。<br><a href="https://flutter.dev/docs/development/ui/widgets/layout">关于Flutter布局的更多信息</a></p>
<h1 id="使用Material组件"><a href="#使用Material组件" class="headerlink" title="使用Material组件"></a>使用Material组件</h1><p>Flutter提供许多小部件帮你遵守Material Desgn规范。Material应用以<code>MaterialApp</code>小部件启动，其在你应用的根构建许多有用的小部件，包含一个<code>Navigator</code>。Navigator管理一叠以字符串标识的小部件，亦即“路由”，令你应用在屏幕之间平滑跳转。使用MaterialApp小部件并非强制，但是一个好的实践。</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MaterialApp</span><span class="token punctuation">(</span>
    title<span class="token punctuation">:</span> <span class="token string">'Flutter Tutorial'</span><span class="token punctuation">,</span>
    home<span class="token punctuation">:</span> <span class="token function">TutorialHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">TutorialHome</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token metadata symbol">@override</span>
  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Scaffold 是主要Material组件的一个布局.</span>
    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>
      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>
        leading<span class="token punctuation">:</span> <span class="token function">IconButton</span><span class="token punctuation">(</span>
          icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">,</span>
          tooltip<span class="token punctuation">:</span> <span class="token string">'Navigation menu'</span><span class="token punctuation">,</span>
          onPressed<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Example title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        actions<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>
          <span class="token function">IconButton</span><span class="token punctuation">(</span>
            icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">,</span>
            tooltip<span class="token punctuation">:</span> <span class="token string">'Search'</span><span class="token punctuation">,</span>
            onPressed<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// body 为屏幕的主要部分.</span>
      body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>
        child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      floatingActionButton<span class="token punctuation">:</span> <span class="token function">FloatingActionButton</span><span class="token punctuation">(</span>
        tooltip<span class="token punctuation">:</span> <span class="token string">'Add'</span><span class="token punctuation">,</span> <span class="token comment">// 为辅助功能使用</span>
        child<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">,</span>
        onPressed<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在我们从<code>MyAppBar</code>和<code>MyScaffold</code>切换到<code>material.dart</code>中的<code>AppBar</code>和<code>Scaffold</code>，从而上一节中Demo的样子更符合Mertial一些。比如，app bar有阴影并且标题文本自动继承正确样式。另外我们还添加了一个浮动按钮。<br>注意到我们又将一个小部件当做参数传递给其他小部件。<code>Scaffold</code>小部件通过接收许多小部件作为参数，将其放到Scaffold布局合适的位置。类似的，<code>AppBar</code>小部件也是由我们传递小部件设置<code>title</code>小部件的<code>leading</code>和<code>action</code>。该模式遍及于框架中，在你设计自己的小部件时也应该如此考虑。<br><a href="https://flutter.dev/docs/development/ui/widgets/material">关于Material组件的更多信息</a></p>
<h1 id="处理手势"><a href="#处理手势" class="headerlink" title="处理手势"></a>处理手势</h1><p>大多数应用含有一些用户与系统间的交互。构建一个交互应用的第一步即是用户手势操作的探测。我们下面通过创建一个简单的按钮来看看它如何运作：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MyButton</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token metadata symbol">@override</span>
  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">GestureDetector</span><span class="token punctuation">(</span>
      onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'MyButton was tapped!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token function">Container</span><span class="token punctuation">(</span>
        height<span class="token punctuation">:</span> <span class="token number">36.0</span><span class="token punctuation">,</span>
        padding<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        margin<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        decoration<span class="token punctuation">:</span> <span class="token function">BoxDecoration</span><span class="token punctuation">(</span>
          borderRadius<span class="token punctuation">:</span> BorderRadius<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightGreen<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>
          child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Engage'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>GestureDetector</code>小部件探测用户的手势操作而非可见小部件。当用户触击<code>Containter</code>小部件时，<code>GestureDetector</code>调用<code>onTap</code>的回调函数（此例中将在控制台打印一条消息）。你可以使用<code>GestureDetector</code>来探测多种输入手势，如触击、拖拽、缩放等。<br>许多小部件使用<code>GestureDetector</code>来为其他小部件提供可选的回调。例如<code>IconButton</code>、<code>RaisedButton</code>以及<code>FloatingActionButton</code>有在用户点击控件时触发的<code>onPressed</code>回调。<br><a href="https://flutter.dev/docs/development/ui/advanced/gestures">关于Flutter中触控的更多信息</a></p>
<h1 id="改变小部件以响应输入"><a href="#改变小部件以响应输入" class="headerlink" title="改变小部件以响应输入"></a>改变小部件以响应输入</h1><p>到目前为止，我们都只使用了无状态小部件。无状态的小部件从它的父小部件处接收参数，存入它<code>final</code>的成员变量中。当小部件被构建（build）时，使用存储的值来衍生出它创建的小部件的新变量。<br>为了创建更复杂的体验——例如，对用户的输入以更有趣的方式响应——应用一般会携带一些状态。Flutter使用有状态小部件（StatefulWidget）来实现在这一点。有状态小部件是知道如何生成用来保持状态的“状态（State）”对象的小部件。以前面提到的<code>RaisedButton</code>为例：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 这个类为State的配置</span>
  <span class="token comment">// 它持有由其父提供的被State构造方法使用的值（本例中为空）</span>
  <span class="token comment">// Widget的子类中的域都被标记为“final”</span>

  <span class="token metadata symbol">@override</span>
  _CounterState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_CounterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">_CounterState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>Counter<span class="token operator">></span> <span class="token punctuation">&#123;</span>
  int _counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">_increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// setState方法的调用告诉Flutter框架有事物发生变化</span>
      <span class="token comment">// 从而导致其重新运行下面的build方法令显示可以反映更新后的值</span>
      <span class="token comment">// 如果我们不调用setState()改变_counter</span>
      <span class="token comment">// 那么build方法就不会再被调用</span>
      <span class="token comment">// 并且没有事情显得发生过</span>
      _counter<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token metadata symbol">@override</span>
  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 如本实例上面_increment方法做的</span>
    <span class="token comment">// 该方法在每次setState被调用时执行</span>
    <span class="token comment">// Flutter框架被优化为执行build方法非常快速</span>
    <span class="token comment">// 因此你可以只重建需要更新的地方而非不得不改变小部件实例</span>
    <span class="token keyword">return</span> <span class="token function">Row</span><span class="token punctuation">(</span>
      children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>
        <span class="token function">RaisedButton</span><span class="token punctuation">(</span>
          onPressed<span class="token punctuation">:</span> _increment<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Increment'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Count: $_counter'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>你可能会好奇为何State和StatefulWidget是分开的对象，在Flutter中，这两种对象有不同的生命周期。Widget是临时的对象，用以构建出应用在当前状态下的表现形态。而State则是持久的对象，用以在<code>build()</code>方法之间记住信息。<br>上面这个例子接收用户输入并直接在build方法中使用结果。在更复杂的应用中，不同层级的Widget可能负责不同事务，例如一个Widget可能负责收集指定的信息如日期、位置等，而另一个Widget利用这些信息改变整体的展现。<br>在Flutter中，变化通知由回调而根据Widget层级向上流动，当前状态则向下流动到用以展现的无状态小部件，重引导这流向的即为State。下面这个略微复杂一些的例子展示了这是如何发挥作用的：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">CounterDisplay</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token function">CounterDisplay</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> int count<span class="token punctuation">;</span>

  <span class="token metadata symbol">@override</span>
  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Count: $count'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">CounterIncrementor</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token function">CounterIncrementor</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onPressed<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> VoidCallback onPressed<span class="token punctuation">;</span>

  <span class="token metadata symbol">@override</span>
  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">RaisedButton</span><span class="token punctuation">(</span>
      onPressed<span class="token punctuation">:</span> onPressed<span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Increment'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token metadata symbol">@override</span>
  _CounterState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_CounterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">_CounterState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>Counter<span class="token operator">></span> <span class="token punctuation">&#123;</span>
  int _counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">_increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token operator">++</span>_counter<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token metadata symbol">@override</span>
  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">Row</span><span class="token punctuation">(</span>children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>
      <span class="token function">CounterIncrementor</span><span class="token punctuation">(</span>onPressed<span class="token punctuation">:</span> _increment<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">CounterDisplay</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> _counter<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意到我们创建了两个StatelessWidget将计数器的_展示_（<code>CounterDisplay</code>）和_改变_（<code>CounterIncrementor</code>）清晰地分开。尽管最终结果与前面的方式完全一样，责任的分离允许单个Widget里囊括更大的复杂性，从而在父层级上更简洁。<br>更多的信息：关于<a href="https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html">StatefulWidget</a>和<a href="https://api.flutter.dev/flutter/widgets/State/setState.html">setState</a></p>
<h1 id="将这些合在一起"><a href="#将这些合在一起" class="headerlink" title="将这些合在一起"></a>将这些合在一起</h1><p>下面是将上面介绍的概念合在一起的复杂的例子：一个假设的购物应用展示各种售卖的产品并设有购物车保存有意购买的产品。先定义一个展示用的类<code>ShoppingListItem</code>开始：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token function">Product</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token function">CartChangedCallback</span><span class="token punctuation">(</span>Product product<span class="token punctuation">,</span> bool inCart<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ShoppingListItem</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token function">ShoppingListItem</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>Product product<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inCart<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onCartChanged<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">:</span> product <span class="token operator">=</span> product<span class="token punctuation">,</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token function">ObjectKey</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> Product product<span class="token punctuation">;</span>
  <span class="token keyword">final</span> bool inCart<span class="token punctuation">;</span>
  <span class="token keyword">final</span> CartChangedCallback onCartChanged<span class="token punctuation">;</span>

  Color <span class="token function">_getColor</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// The theme depends on the BuildContext because different parts of the tree</span>
    <span class="token comment">// can have different themes.  The BuildContext indicates where the build is</span>
    <span class="token comment">// taking place and therefore which theme to use.</span>

    <span class="token keyword">return</span> inCart <span class="token operator">?</span> Colors<span class="token punctuation">.</span>black54 <span class="token punctuation">:</span> Theme<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>primaryColor<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  TextStyle <span class="token function">_getTextStyle</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inCart<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>
      color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>black54<span class="token punctuation">,</span>
      decoration<span class="token punctuation">:</span> TextDecoration<span class="token punctuation">.</span>lineThrough<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token metadata symbol">@override</span>
  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">ListTile</span><span class="token punctuation">(</span>
      onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">onCartChanged</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token operator">!</span>inCart<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      leading<span class="token punctuation">:</span> <span class="token function">CircleAvatar</span><span class="token punctuation">(</span>
        backgroundColor<span class="token punctuation">:</span> <span class="token function">_getColor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>name<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">_getTextStyle</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>ShoppingListItem</code>小部件遵循无状态小部件的通用模式，以final的成员变量保存从构造函数接受的值来在build函数使用。例如<code>inCart</code>布尔值在两种视觉展现上切换：使用当前主题的主色以及使用灰色。<br>当用户点击列表项时，小部件不直接修改<code>inCart</code>值，而是调用从父小部件接收的<code>onCartChanged</code>。这样方式让你可以在更高小部件层级保存状态从而持续更长时间。极端的情况，状态保持在传递给<code>runApp()</code>的小部件就会持续整个应用的生命周期。<br>当其父接收到<code>onCartChanged</code>回调后会更新它内部状态，触发其重新构造并创建带有新<code>inCart</code>值的新<code>ShoppingListItem</code>。尽管其父在重新构造时创建了新实例，但由于框架会比较新构建的和之前的小部件并只应用根本的<code>RenderObject</code>的不同之处，所以操作开销很小。<br>这是个父小部件保存可变状态的示例：</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ShoppingList</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token function">ShoppingList</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>Key key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>products<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Product<span class="token operator">></span> products<span class="token punctuation">;</span>

  <span class="token comment">// 框架于小部件在树种给定位置首次出现时调用createState</span>
  <span class="token comment">// 如果其父重新构造并使用同样同一小部件类型（带同样key）</span>
  <span class="token comment">// 框架会复用这个State对象而非创建新的State对象</span>

  <span class="token metadata symbol">@override</span>
  _ShoppingListState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_ShoppingListState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">_ShoppingListState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>ShoppingList<span class="token operator">></span> <span class="token punctuation">&#123;</span>
  Set<span class="token operator">&lt;</span>Product<span class="token operator">></span> _shoppingCart <span class="token operator">=</span> Set<span class="token operator">&lt;</span>Product<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">_handleCartChanged</span><span class="token punctuation">(</span>Product product<span class="token punctuation">,</span> bool inCart<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 当用户改变购物车中物品时</span>
      <span class="token comment">// 我们需要在setState中改变_shoppingCart</span>
      <span class="token comment">// 接着框架就会调用下面的build来更新应用的视觉表现</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>inCart<span class="token punctuation">)</span>
        _shoppingCart<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        _shoppingCart<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token metadata symbol">@override</span>
  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>
      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>
        title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Shopping List'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      body<span class="token punctuation">:</span> <span class="token function">ListView</span><span class="token punctuation">(</span>
        padding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>products<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Product product<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token function">ShoppingListItem</span><span class="token punctuation">(</span>
            product<span class="token punctuation">:</span> product<span class="token punctuation">,</span>
            inCart<span class="token punctuation">:</span> _shoppingCart<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">,</span>
            onCartChanged<span class="token punctuation">:</span> _handleCartChanged<span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MaterialApp</span><span class="token punctuation">(</span>
    title<span class="token punctuation">:</span> <span class="token string">'Shopping App'</span><span class="token punctuation">,</span>
    home<span class="token punctuation">:</span> <span class="token function">ShoppingList</span><span class="token punctuation">(</span>
      products<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Product<span class="token operator">></span><span class="token punctuation">[</span>
        <span class="token function">Product</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">'Eggs'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">Product</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">'Flour'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">Product</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">'Chocolate chips'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>ShoppingList</code>类继承自<code>StatefulWidget</code>即可存储可变状态。当其第一次被插入树中时，框架调用<code>createState</code>函数来创建一个新的<code>_ShoppingListState</code>。（注意<code>State</code>子类的命名前有下划线表明其为私有化实现）。当父部件重新构造时，创建一个新的<code>ShoppingList</code>实例，但是框架将复用树中已有的<code>_ShoppingListState</code>实例而非再次调用<code>createState</code>。<br><code>_ShoppingListState</code>可以使用它小部件的属性，如果其父重新构造并创建新的<code>ShoppingList</code>，<code>_ShoppingListState</code>使用新的小部件值重新构造。如果你希望在小部件属性改变时被通知，可以重写<code>didUpdateWidget</code>方法从而被传入旧的小部件以便和当前的进行比较。<br>当处理<code>onCartChanged</code>回调时，<code>_ShoppingListState</code>通过在<code>_shoppingCart</code>中添加或删除一个产品改变其内部状态。它将这些包在<code>setState</code>调用中以通知框架它内部状态发生了变化。<code>setState</code>的调用会将小部件标记为脏并计划在下次应用刷新屏幕时将它重建。如果你在修改内部状态时忘记调用<code>setState</code>，框架就不会知道小部件发生了变化也就不会调用build方法，这意味着用户界面不会更新以展示状态的改变。<br>使用这样方式管理状态，你不需要为创建和更新小部件分别编写代码，而是简单实现build方法来同时处理这两种情况。<br>#响应小部件生命周期事件<br>对<code>StatefulWidget</code>调用<code>createState</code>后，框架将新状态对象插入树中并对其调用<code>initState</code>。<code>State</code>的子类可以重写该方法来做仅需进行一次的工作，例如你可以重写它来配置动画或是订阅平台服务。在实现时需先调用<code>super.initState</code>。<br>当一个状态对象不再需要时，框架对其调用<code>dispose</code>方法。你可以重写其做一些清洁工作，如重弄它来取消计时器或是取消订阅平台服务。在实现时最后需调用<code>super.dispose</code>。<br><a href="https://api.flutter.dev/flutter/widgets/State-class.html">关于State的更多信息</a></p>
<h1 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h1><p>你可以使用键值来控制当一个小部件重建时框架如何将小部件们匹配关联。默认框架依照出现顺序及通过<a href="https://api.flutter.dev/flutter/widgets/Widget-class.html#runtimeType"><code>runtimeType</code></a>将当前小部件与先前的构建匹配关联。带键值则框架要求两个小部件像有同样<code>runtimeType</code>一样需要有同样的key。<br>键值在需要创建很多同一类型小部件的小部件内很有用。如<code>ShoppingList</code>小部件创建许多<code>ShoppingListItem</code>小部件实例填充其可视区域：</p>
<ul>
<li>无键值则当前构建的第一个条目总是与前一构建的第一条目同步，即使它应当已经滑动出了屏幕可见区域。</li>
<li>给列表中每个条目分配一个键值，无限列表将因为框架匹配项目键值而高效并有相似（相同）显示。此外同步条目意味着有状态子小部件中保持的状态会附加在同一条目而非视觉上同一位置。<br><a href="https://api.flutter.dev/flutter/foundation/Key-class.html">关于Key API的更多信息</a></li>
</ul>
<h1 id="全局键值（Global-Keys）"><a href="#全局键值（Global-Keys）" class="headerlink" title="全局键值（Global Keys）"></a>全局键值（Global Keys）</h1><p>你可以使用全局键值来辨认子小部件。全局键值必须在整个小部件层级中无重复，不像本地键值仅需在兄弟中无重复即可。因其全局独一无二，可以使用它来获取小部件的关联状态。<br><a href="https://api.flutter.dev/flutter/widgets/GlobalKey-class.html">关于GlobalKey API的更多信息</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>计算机</tag>
        <tag>Flutter</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>2018年11月 关西之行</title>
    <url>/2018/12/31/2018%E5%B9%B411%E6%9C%88%20%E5%85%B3%E8%A5%BF%E4%B9%8B%E8%A1%8C/</url>
    <content><![CDATA[<p><img data-src="https://pic.gps949.com/1811KANSAI/KIX02915.jpg"></p>
<span id="more"></span>
<p><img data-src="https://pic.gps949.com/1811KANSAI/KIX02797.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02803.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02806.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02810.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02815.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02819.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02823.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02831.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02841.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02843.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02849.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02850.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02868.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02870.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02875.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02889.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02891.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02895.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02899.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02905.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02913.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02915.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02918.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02922.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02923.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02930.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02931.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02932.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02944.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02947.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02951.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02957.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02959.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02963.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02968.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02972.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02974.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02985.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02990.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX02999.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03003.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03006.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03007.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03010.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03019.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03063.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03064.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03066.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03114.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03116.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03120.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03128.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03131.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03133.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03144.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03146.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03163.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03169.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03171.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03175.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03177.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03183.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03193.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03209.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03210.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03214.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03224.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03232.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03235.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03241.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03245.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03257.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03262.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03265.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03274.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03283.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03289.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03292.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03294.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03307.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03312.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03324.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03330.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03332.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03340.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03345.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03351.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03353.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03356.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03361.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03366.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03369.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03374.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03378.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03379.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03398.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03403.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03420.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03447.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03458.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03461.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03463.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03468.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03474.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03476.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03477.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03482.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03486.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03493.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03497.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03500.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03503.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03510.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03552.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03553.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03567.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03568.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03572.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03597.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03600.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03606.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03611.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03624.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03646.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03665.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03671.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03674.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03678.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03691.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03707.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03708.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03713.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03719.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03720.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03723.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03725.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03726.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03731.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03745.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03746.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03755.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03756.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03779.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03799.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03803.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03806.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03807.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03813.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03816.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03822.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03832.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03851.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03870.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03878.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03892.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03903.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03907.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03916.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03919.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03927.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03936.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03940.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03952.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03960.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03963.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03978.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03981.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03984.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03985.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03988.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03989.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03992.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03995.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX03997.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04004.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04012.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04014.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04017.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04020.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04021.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04025.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04035.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04038.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04042.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04047.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04048.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04052.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04053.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04056.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04059.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04060.jpg"><br><img data-src="https://pic.gps949.com/1811KANSAI/KIX04063.jpg"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>摄影</tag>
        <tag>生活</tag>
        <tag>日本</tag>
        <tag>关西</tag>
        <tag>A7R2</tag>
        <tag>游记</tag>
        <tag>红叶</tag>
      </tags>
  </entry>
  <entry>
    <title>2018年6月 东京之行</title>
    <url>/2018/07/01/2018%E5%B9%B46%E6%9C%88%20%E4%B8%9C%E4%BA%AC%E4%B9%8B%E8%A1%8C/</url>
    <content><![CDATA[<p><img data-src="https://pic.gps949.com/1806TOKYO/DSC02620.jpg"></p>
<span id="more"></span>
<p><img data-src="https://pic.gps949.com/1806TOKYO/DSC01977.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC01978.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC01979.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC01982.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC01983.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC01987.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC01990.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC01996.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02002.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02004.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02006.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02008.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02010.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02012.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02016.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02024.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02025.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02027.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02028.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02031.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02038.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02041.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02045.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02064.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02066.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02083.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02086.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02087.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02088.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02089.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02093.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02095.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02099.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02102.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02104.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02106.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02109.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02110.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02112.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02117.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02128.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02129.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02142.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02144.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02146.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02148.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02152.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02156.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02157.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02158.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02160.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02162.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02165.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02166.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02171.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02172.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02177.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02179.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02180.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02185.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02196.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02197.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02200.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02202.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02204.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02207.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02210.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02220.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02233.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02234.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02248.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02253.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02256.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02260.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02263.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02266.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02268.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02270.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02272.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02274.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02279.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02310.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02312.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02316.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02329.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02335.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02350.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02353.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02354.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02360.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02378.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02380.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02382.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02399.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02401.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02403.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02407.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02414.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02415.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02421.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02423.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02424.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02427.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02429.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02435.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02444.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02445.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02452.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02454.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02455.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02459.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02461.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02466.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02469.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02473.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02480.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02483.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02489.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02490.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02500.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02501.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02502.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02508.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02510.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02512.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02515.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02516.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02524.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02527.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02529.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02530.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02542.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02546.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02551.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02553.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02554.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02555.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02558.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02560.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02562.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02567.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02570.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02571.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02572.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02577.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02579.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02582.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02583.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02584.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02586.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02590.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02594.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02595.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02596.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02597.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02607.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02618.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02620.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02621.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02622.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02623.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02624.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02625.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02632.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02633.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02643.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02650.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02652.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02653.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02675.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02676.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02680.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02681.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02682.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02691.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02692.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02710.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02711.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02724.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02730.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02736.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02737.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02739.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02740.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02745.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02746.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02747.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02752.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02760.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02764.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02765.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02766.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02772.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02773.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02774.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02776.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02781.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02782.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02783.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02784.jpg"><br><img data-src="https://pic.gps949.com/1806TOKYO/DSC02785.jpg"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>摄影</tag>
        <tag>生活</tag>
        <tag>日本</tag>
        <tag>A7R2</tag>
        <tag>游记</tag>
        <tag>东京</tag>
        <tag>紫阳花</tag>
      </tags>
  </entry>
  <entry>
    <title>2018年4月 北海道之行</title>
    <url>/2018/06/01/2018%E5%B9%B44%E6%9C%88%20%E5%8C%97%E6%B5%B7%E9%81%93%E4%B9%8B%E8%A1%8C/</url>
    <content><![CDATA[<p><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01958.jpg"></p>
<span id="more"></span>
<p><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00606.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00620.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00622.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00649.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00689.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00696.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00711.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00714.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00757.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00788.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00837.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00850.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00852.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00895.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00922.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00942.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00971.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00972.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00977.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC00984.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01020.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01025.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01039.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01076.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01084.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01104.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01142.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01145.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01181.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01190.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01192.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01221.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01225.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01237.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01239.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01246.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01343.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01349.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01355.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01371.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01378.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01418.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01463.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01513.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01555.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01572.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01574.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01595.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01597.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01611.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01620.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01676.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01761.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01803.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01839.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01863.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01951.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01953.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01958.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01959.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01960.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/DSC01962.jpg"><br><img data-src="https://pic.gps949.com/1805HOKKAIDO/17283200.AVI"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>摄影</tag>
        <tag>生活</tag>
        <tag>日本</tag>
        <tag>A7R2</tag>
        <tag>游记</tag>
        <tag>北海道</tag>
        <tag>樱花</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文章</title>
    <url>/1990/01/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="962ebebcbfa6c3d95a9bee8a5dd6a4a74fbd48cdb89a0bf7a8a46b6d5aac3cf3">4630436162ade97ba2718b7d0c4b3b63cbf22708173a6d59f69c642e7d695da8d3eff0634cf260dfd8ef382f30d1931e079b6b9b6de89803181731e21def3a2dd356cedc63da8b863906130bae2caf1eff08c73119cb70b4b45c7aaf27557cdc77f9db42c7c7ef350c0bd8dc4a7e31c75cc0b8a67b799d77ab4405cf8ade2371</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码后阅读</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>测试</tag>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
</search>
